{"componentChunkName":"component---src-templates-docs-js","path":"/i18n/2-index","result":{"data":{"site":{"siteMetadata":{"title":"","docsLocation":"https://github.com/iLib-js/docs/tree/master/content"}},"mdx":{"fields":{"id":"437b39fe-ad6b-520b-83ba-4c7984a52a7d","title":"Handling Strings","slug":"/i18n/2-index"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Handling Strings\",\n  \"metaTitle\": \"Handling Strings page\",\n  \"metaDescription\": \"Handling Strings Service page\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"String Translation\"), mdx(\"p\", null, \"All translable strings should be wrapped in a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ilib-js.github.io/iLib/docs/api/jsdoc/symbols/ResBundle.html#getString\"\n  }, \"getString\"), \" call. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"var ResBundle = require(\\\"<path-to-ilib>/lib/ResBundle.js\\\")\\n\\nvar rb = new ResBundle({locale: \\\"ko-KR\\\"});\\nvar str = rb.getString(\\\"My Label\\\");\\n\")), mdx(\"h3\", null, \"Disambiguating String\"), mdx(\"p\", null, \"Let's say you had two strings that have the same text but are used in a different context and therefore possible could have different translations. To disambiguate these, use an object with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"key-value\"), \" pair rather than a single string as the parameter. The key must be unique.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"var ResBundle = require(\\\"<path-to-ilib>/lib/ResBundle.js\\\")\\n\\nvar rb = new ResBundle({locale: \\\"ko-KR\\\"});\\nvar str = rb.getString(\\\"My Label\\\", \\\"Common String\\\");\\n\")), mdx(\"h3\", null, \"Resource Bundles\"), mdx(\"p\", null, \"iLib's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ilib-js.github.io/iLib/docs/api/jsdoc/symbols/ResBundle.html\"\n  }, \"ResBundle\"), \" is the resource bundle class that represents the translation of a set of strings each app has its own resource bundle. Resource bundles are loaded dynamically. The most important method is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ilib-js.github.io/iLib/docs/api/jsdoc/symbols/ResBundle.html#getString\"\n  }, \"getString\"), \".\"), mdx(\"h3\", null, \"Translating Strings\"), mdx(\"p\", null, \"Strings inside of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ilib-js.github.io/iLib/docs/api/jsdoc/symbols/ResBundle.html#getString\"\n  }, \"getString\"), \" calls are automatically extracted from the source code using the localization tool called \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/iLib-js/loctool\"\n  }, \"loctool\"), \", translated, then written out to the locale's resource file Strings returned from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ilib-js.github.io/iLib/docs/api/jsdoc/symbols/ResBundle.html#getString\"\n  }, \"getString\"), \" are translated to the current UI locale.\"), mdx(\"h3\", null, \"Where the Resources are Stored\"), mdx(\"p\", null, \"Each app contains a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resources\"), \" directory.\\nUnder the resources dir are directories named for the locales.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"iLib reads the translations from multiple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"strings.json\"), \" files under the locale directories.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Layered: lower levels override strings in the upper levels\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"eg. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resources/sr/Latn/RS/strings.json\"), \" overrides strings in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resources/sr/Latn/strings.json\"), \", which override \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resources/sr/strings.json\"), \", which overrides the English source string\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Resources Dir Layout:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"resources/\\n   en/\\n      strings.json - shared strings for all English\\n      CA/\\n         strings.json - only strings special to Canada\\n      GB/\\n         strings.json - only strings special to Great Britain\\n\")), mdx(\"p\", null, \"You do not have to create this structure yourself. The localization tool will do this for you.\"), mdx(\"h3\", null, \"Formatting Strings\"), mdx(\"p\", null, \"In order to format strings, use the iLib's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ilib-js.github.io/iLib/docs/api/jsdoc/symbols/IString.html\"\n  }, \"IString\"), \" class. The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ilib-js.github.io/iLib/docs/api/jsdoc/symbols/IString.html#format\"\n  }, \"format\"), \" methods allows\\nfor interpolation of named parameters into the string. Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"var IString = require(\\\"<path-to-ilib>/lib/IString.js\\\")\\nvar template = new IString(\\\"There are {n} objects.\\\");\\nvar str = template.format({n: 15});\\n\\n// str now has the value \\\"There are 15 objects.\\\"\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rb.getString()\"), \" returns an IString instance, so the results can be used for formatting right away.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ilib-js.github.io/iLib/docs/api/jsdoc/symbols/IString.html\"\n  }, \"IString\"), \" has all the same methods as an intrinsic string, so it is almost a replacement.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"It cannot be used in certain places that require an intrinsic string.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Must call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toString()\"), \" method to convert to an intrinsic string.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"var ResBundle = require(\\\"<path-to-ilib>/lib/ResBundle.js\\\")\\nvar rb = new ResBundle({locale: \\\"ko-KR\\\"});\\n\\nvar number = 3;\\nvar template = rb.getString( \\\"0#There are no objects.|1#There is 1 object.|#There are {n} objects.\\\");\\nvar str = template.formatChoice(number, {n: number});\\n\\n// str now has the value \\\"There are 3 objects.\\\"\\n\")), mdx(\"h3\", null, \"Choice Formats\"), mdx(\"p\", null, \"Languages vary in how they handle plurals of nouns or unit expressions (\\\"hour\\\" vs \\\"hours\\\", and so on). Some languages have two forms, like English; some languages have only a single form; and some languages have multiple forms. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"zero\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"one (singular)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"two (dual)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"few (paucal)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"many (also used for fractions if they have a separate class)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"other (required\\u2014general plural form\\u2014also used if the language only has a single form)\")), mdx(\"p\", null, \"Handling of plurals in Russian, Serbian, etc. is accomplished in formatChoice() using number classes\\nAllows the translators to handle complex plural rules properly for their language\\nClasses are \\\"zero\\\", \\\"one\\\", \\\"two\\\", \\\"few\\\" and \\\"many\\\"\\nExample:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"var ResBundle = require(\\\"<path-to-ilib>/lib/ResBundle.js\\\")\\nvar rb = new ResBundle({locale: \\\"ru-RU\\\"});\\n\\nvar template = rb.getString( \\\"0#There are no objects.|few#There are a few ({n}) objects.|many#There are a many ({n}) objects.|#There are many  objects. ({n})\\\");\\n\\nvar number=0\\ntemplate.formatChoice(number,{n:number})\\n// 'There are no objects.'\\n\\nvar number=2\\ntemplate.formatChoice(number,{n:number})\\n// 'There are a few (2) objects.'\\n\\nvar number=8\\ntemplate.formatChoice(number,{n:number})\\n// 'There are a many (8) objects.'\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#string-translation","title":"String Translation"},{"url":"#disambiguating-string","title":"Disambiguating String"},{"url":"#resource-bundles","title":"Resource Bundles"},{"url":"#translating-strings","title":"Translating Strings"},{"url":"#where-the-resources-are-stored","title":"Where the Resources are Stored"},{"url":"#formatting-strings","title":"Formatting Strings"},{"url":"#choice-formats","title":"Choice Formats"}]},"parent":{"__typename":"File","relativePath":"i18n/2-index.md"},"frontmatter":{"metaTitle":"Handling Strings page","metaDescription":"Handling Strings Service page","canonicalUrl":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/aboutus","title":"About US"}}},{"node":{"fields":{"slug":"/knowledge","title":"I18N Knowledge"}}},{"node":{"fields":{"slug":"/","title":"Welcome"}}},{"node":{"fields":{"slug":"/integration","title":"Platform Integration"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/l10n","title":"Localization"}}},{"node":{"fields":{"slug":"/i18n","title":"Internationalization"}}},{"node":{"fields":{"slug":"/i18n/1-index","title":"Getting iLib into your project"}}},{"node":{"fields":{"slug":"/i18n/2-index","title":"Handling Strings"}}},{"node":{"fields":{"slug":"/i18n/3-index","title":"Data Formatting"}}},{"node":{"fields":{"slug":"/i18n/5-index","title":"More tutorials"}}},{"node":{"fields":{"slug":"/knowledge/1-index","title":"Locale"}}},{"node":{"fields":{"slug":"/i18n/4-index","title":"Basic Information"}}},{"node":{"fields":{"slug":"/knowledge/2-index","title":"TimeZone"}}},{"node":{"fields":{"slug":"/knowledge/3-index","title":"CLDR"}}},{"node":{"fields":{"slug":"/l10n/1-index","title":"Process"}}},{"node":{"fields":{"slug":"/integration/1-index","title":"webOS "}}},{"node":{"fields":{"slug":"/l10n/2-index","title":"loctool Setup"}}},{"node":{"fields":{"slug":"/l10n/4-index","title":"loctool for JavaScript devs"}}},{"node":{"fields":{"slug":"/l10n/5-index","title":"loctool for QML devs"}}},{"node":{"fields":{"slug":"/l10n/3-index","title":"loctool plugins"}}},{"node":{"fields":{"slug":"/l10n/6-index","title":"loctool for Android devs"}}},{"node":{"fields":{"slug":"/l10n/7-index","title":"loctool for Markdown devs"}}}]}},"pageContext":{"id":"437b39fe-ad6b-520b-83ba-4c7984a52a7d"}},"staticQueryHashes":["2619113677","2619113677","3652655204","3652655204","3706406642","3706406642","417421954","417421954"]}