webpackJsonp([0x76c0e6dc28c9],{954:function(n,s){n.exports={data:{markdownRemark:{html:'<nav role="navigation" class="page-toc">\n<ul>\n<li><a href="#prerequisites">Prerequisites</a></li>\n<li><a href="#unit-testing">Unit Testing</a></li>\n<li><a href="#testing-react">Testing React</a></li>\n<li><a href="#why-unit-testing">Why Unit Testing?</a></li>\n<li><a href="#how-tests-influence-code">How Tests Influence Code</a></li>\n<li><a href="#what-to-do-next">What to do next</a></li>\n</ul>\n</nav>\n<h2 id="prerequisites"><a href="#prerequisites" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Prerequisites</h2>\n<h3 id="running-tests"><a href="#running-tests" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Running Tests</h3>\n<p>If you have created a enact project using the <code class="language-text">enact cli</code> it will have everything you need\nto run tests. For a single-run, execute <code class="language-text">enact test</code>.\nYou can also have the tests automatically run each time the filesystem changes simply with\n<code class="language-text">enact test</code>. If you built your app using <code class="language-text">enact cli</code> you can also use\n<code class="language-text">npm run test</code> and <code class="language-text">npm run test-watch</code> for short. Both commands will execute\nthe test suite and output the results to the console. If you are working on\nframework modules, at a minimum you should perform the single test run on your\nmodule before creating a pull request on a branch.</p>\n<h3 id="file-structure"><a href="#file-structure" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>File Structure</h3>\n<p>Tests should be placed into a <code class="language-text">tests</code> directory within the component directory.  Test files begin with the name of the\ncomponent or item under test and end with the <code class="language-text">&quot;-specs.js&quot;</code> suffix.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">+ src\n\t+ components\n\t\t+ IconButton\n\t\t\t+tests\n\t\t\t\tIconButton-specs.js\t\t\t&lt;-- Tests go here!\n\t\t\tIconButton.js\n\t\t\tpackage.json</code></pre>\n      </div>\n<h3 id="tools"><a href="#tools" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tools</h3>\n<p>We use a dizzying number of tools to perform unit testing.  A quick overview of the different tools can be helpful.</p>\n<ul>\n<li><a href="https://jestjs.io/">Jest</a> - A test framework. This tool allows us to setup, assert and run tests. We can also use <code class="language-text">jest</code> as a mocking library.</li>\n<li><a href="http://airbnb.io/enzyme/">Enzyme</a> - A test library for use with React.  It allows us to shallowly render components and inspect the output.</li>\n<li><a href="https://github.com/jsdom/jsdom">jsdom</a> - A pure-JavaScript implementation of many web standards, notably the WHATWG DOM and HTML Standards, for use with Node.js.</li>\n</ul>\n<h2 id="unit-testing"><a href="#unit-testing" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Unit Testing</h2>\n<blockquote>\n<p>If a video is more your style we have one here: <a href="https://www.youtube.com/watch?v=DNAsXbnCV8w">https://www.youtube.com/watch?v=DNAsXbnCV8w</a></p>\n</blockquote>\n<p>Unit testing is the core of our testing platform. Unit testing only tests the smallest units of code. Typically a test\njust tests a function/method. For Enact framework developers testing will also extend into component and virtual DOM testing.</p>\n<p>We are using <a href="https://jestjs.io/">Jest</a> as our testing framework. We won’t cover all the functions this gives us in this document. We\nsuggest looking at the <a href="https://jestjs.io/docs/en/api">Jest Docs</a> after finishing this if you want to know all of the things Jest can give you.</p>\n<p>Say you have a function like this:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">numA<span class="token punctuation">,</span> numB</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> numA <span class="token operator">+</span> numB<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>To test this function in <code class="language-text">Jest</code> we could write something like:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Should add the two arguments together\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> \n\t<span class="token keyword">const</span> expected <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> actual <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>\n\t\n\t<span class="token function">expect</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<blockquote>\n<p><strong>NOTE</strong>: This test is a very simplistic example. This is probably code that should not need to be tested in production, but\nit’s a good way to illustrate basic unit testing.</p>\n</blockquote>\n<p>This is a decent unit test, but what happens if somebody implemented the <code class="language-text">add()</code> function like this:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">numA<span class="token punctuation">,</span> numB</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\t\n<span class="token comment">// or</span>\n\t\n<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">numA<span class="token punctuation">,</span> numB</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> numA <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>The test would pass every single time, but the function would still fail in most cases. This is an extreme example of poor\ncode, but it does show where unit tests can break down because of certain assumptions.</p>\n<p>Something better would probably be:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Should add the two arguments together\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">let</span> expected <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\t<span class="token keyword">let</span> actual <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">expect</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token keyword">let</span> expected <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n\t<span class="token keyword">let</span> actual <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">expect</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token keyword">let</span> expected <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n\t<span class="token keyword">let</span> actual <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">expect</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<blockquote>\n<p><strong>NOTE</strong>: Unlike this example, developers should strive for having a single <code class="language-text">expect()</code> per test.</p>\n</blockquote>\n<p>This way we can think of edge cases that may surface bugs in our code. For a simple function like <code class="language-text">add()</code> this may be\noverkill, but for some complex code/algorithms it makes sense to test this way.  Using this simple way of checking inputs\nand outputs we can test basically any JavaScript function that returns a value.</p>\n<h2 id="testing-react"><a href="#testing-react" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Testing React</h2>\n<p>To test react we use <a href="http://airbnb.io/enzyme/">Enzyme</a> plus other tools you can find out about <a href="../test-driven-development/">here</a>.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">Text</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Should contain text\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> \n\t<span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span> \n\t\t<span class="token operator">&lt;</span>Text content<span class="token operator">=</span><span class="token string">\'sample\'</span> <span class="token operator">/</span><span class="token operator">></span> \n\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token keyword">const</span> expected <span class="token operator">=</span> <span class="token string">\'sample\'</span><span class="token punctuation">;</span> \n\t<span class="token keyword">const</span> actual <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token function">expect</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>If you wish to learn more about Enzyme’s library of functions look <a href="https://github.com/airbnb/enzyme">here</a>.</p>\n<p>The three main parts about Enzyme that you need to know are it’s rendering methods.</p>\n<h3 id="shallow"><a href="#shallow" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>shallow()</h3>\n<p><a href="https://github.com/airbnb/enzyme/blob/master/docs/api/shallow.md">Shallow</a> is the virtual DOM representation. It will only render the component plus one level of children. This allows\nus to stay within the smaller confines of a component when testing.</p>\n<h3 id="mount"><a href="#mount" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>mount()</h3>\n<p><a href="https://github.com/airbnb/enzyme/blob/master/docs/api/mount.md">mount</a> is the virtual DOM representation. It will render everything inside the component, including all nested children.\nThis is a little beyond unit testing as you start to test the integration of a few components.</p>\n<h3 id="render"><a href="#render" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>render()</h3>\n<p><a href="https://github.com/airbnb/enzyme/blob/master/docs/api/render.md">render</a> is the DOM representation. It will print a string of the output dom that the browser sees.</p>\n<h2 id="why-unit-testing"><a href="#why-unit-testing" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why Unit Testing?</h2>\n<p>The reason to write unit tests is because they are the most simple things to test. The Enact framework code (or an Enact\napplication based on best practices) is essentially made up of units. Sometimes code can be more complex and a simple unit\ntest will not suffice, but a majority of the things that break can be tested by unit tests. </p>\n<p>In the following image, automated unit tests are at the bottom meaning they are the foundation. They are the ones that\nshould be the majority of the test suite. We can assume that if we write enough good unit tests that pass then when we\ncombine our functions they will work in many different scenarios.</p>\n<p><img src="https://watirmelon.files.wordpress.com/2012/01/idealautomatedtestingpyramid.png" alt="Software Testing Pyramid"></p>\n<h3 id="goal-of-unit-testing"><a href="#goal-of-unit-testing" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Goal of Unit Testing</h3>\n<p>The goal in unit testing, as well as testing in general, is to give us confidence in our code. We want to know that our\ncode works, and in the future won’t break. We strive to add value with the tests we add. Not just add tests to cover every\nsingle possible outcome. Before you add a test, determine if it is necessary condition/scenario to test and will it benefit\nthe project in the long run?</p>\n<h3 id="what-unit-testing-should-not-do"><a href="#what-unit-testing-should-not-do" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What Unit Testing Should Not Do</h3>\n<p>Although testing is very helpful, it is not necessary to pursue 100% code coverage. We believe it is not realistic. In the\nframework, we try to cover as much as we think will help, but we do not want to spend time on tests that add no value.</p>\n<p>For instance, you don’t need to test other things that are already robust (likely having their own tests already), such\nas standard library functions or basic JavaScript behavior.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// this is probably going to work</span>\n<span class="token keyword">const</span> <span class="token function">returnArg</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> arg<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Should return arg\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">{</span> \n\t<span class="token keyword">const</span> actual <span class="token operator">=</span> <span class="token function">returnArg</span><span class="token punctuation">(</span><span class="token string">\'sample\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">expect</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">\'sample\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This example looks quite silly, but let’s look at it in a React context:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">//original code</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Text</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//breaking change</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Text</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>cont<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//Example A - Bad</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Should pass prop to component\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> Text <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span>\n\t    <span class="token operator">&lt;</span>Text content<span class="token operator">=</span><span class="token string">\'sample\'</span> <span class="token operator">/</span><span class="token operator">></span>\n\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token keyword">const</span> expected <span class="token operator">=</span> <span class="token string">\'sample\'</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> contentProp <span class="token operator">=</span> Text<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">\'content\'</span><span class="token punctuation">)</span>\n\t<span class="token function">expect</span><span class="token punctuation">(</span>contentProp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//Example B - Better</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Should contain text\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> \n\t<span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span> \n\t   <span class="token operator">&lt;</span>Text content<span class="token operator">=</span><span class="token string">\'sample\'</span> <span class="token operator">/</span><span class="token operator">></span> \n\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token keyword">const</span> expected <span class="token operator">=</span> <span class="token string">\'sample\'</span><span class="token punctuation">;</span> \n\t<span class="token keyword">const</span> actual <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token function">expect</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n      </div>\n<p>In this example a change was made to the Text component. We’ve changed the property name from <code class="language-text">content</code> to <code class="language-text">cont</code>.</p>\n<p>In test Example A, we can be very confident that React will do this correctly (pass the property <code class="language-text">content</code> with the value\n<code class="language-text">&quot;sample&quot;</code>).  We know that React will pass properties to child components. There is a high chance that this test won’t\nbreak, even if somebody makes a change to the code. Example A will continue to pass because it tests passing arguments,\nnot what the component is supposed to display.</p>\n<p>In test Example B, we have something that is fairly simple, but has a higher chance of breaking. We changed the property\nthat we’re using to render. By testing the final output and not the property we get an accurate test.  Also, this is\nlikely the only test we’d need for such a simple component.</p>\n<h2 id="how-tests-influence-code"><a href="#how-tests-influence-code" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How Tests Influence Code</h2>\n<p>TDD can influence our code before we even write it. It can help us focus on making our functions simple and robust, but\nin order to do that we should learn a bit about the code that is easiest to test.</p>\n<h3 id="pure-functions"><a href="#pure-functions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Pure Functions</h3>\n<p>The easiest functions to test are “Pure Functions” From wikipedia pure functions are described as:</p>\n<ol>\n<li>The function always evaluates the same result value given the same argument value(s). The function result value cannot\ndepend on any hidden information or state that may change while program execution proceeds or between different executions\nof the program, nor can it depend on any external input from I/O devices (usually—see below).</li>\n<li>Evaluation of the result does not cause any semantically observable side effect or output, such as mutation of mutable\nobjects or output to I/O devices (usually—see below)</li>\n</ol>\n<p>Simply stated, this means we can’t have anything other than the arguments determine the code’s arguments result.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">//Pure Function</span>\n<span class="token keyword">const</span> <span class="token function">add2</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\n<span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">//6</span>\n\n<span class="token comment">//Class Version</span>\n<span class="token keyword">class</span> <span class="token class-name">Num</span> <span class="token punctuation">{</span>\n\t<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token comment">//this is state</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">//Non-Pure</span>\n\t<span class="token function">add2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+</span> <span class="token number">2</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> newNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\nnewNum<span class="token punctuation">.</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//6</span></code></pre>\n      </div>\n<p>In the example above if you call the pure function <code class="language-text">add2(4)</code> you will always get <code class="language-text">6</code>.</p>\n<p>In the class version, however, the number passed to the constructor is kept as an instance variable. If that instance\nvariable changes the result of <code class="language-text">add2()</code> will change as well. Since it relies on mutable state, the function is not pure.\nThis is called a <strong>side effect</strong>.</p>\n<p>We try to use pure functions as much as possible and it can make our code easy to test and reason about.</p>\n<h4 id="side-effects"><a href="#side-effects" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Side Effects</h4>\n<p>Side Effects include:</p>\n<ul>\n<li>Mutable State</li>\n<li>Mutable Value</li>\n<li>HTTP requests</li>\n<li>Database Calls</li>\n<li>Basically anything out side the scope of a function</li>\n</ul>\n<p>Side effects are difficult to test, so we prefer to limit them to only when needed. Favor pure functions and stateless\nfunctional components if possible. That means do not abuse React component state if you do not need it.</p>\n<p>Unfortunately, we can’t always write pure functions. Sometimes we may have to use React’s component state, we may have\nto make an AJAX call, etc. These are good reasons to not use pure functions. These functions are tougher to test but, not\nimpossible. For example, if you are using Redux for complex application/component state management, you may be using side\neffects to get some of your data.  The Async Action Creators section in\n<a href="http://redux.js.org/docs/recipes/WritingTests.html">http://redux.js.org/docs/recipes/WritingTests.html</a> shows how you can\nwrite tests in those cases.</p>\n<h2 id="what-to-do-next"><a href="#what-to-do-next" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What to do next</h2>\n<p>Please refer to our document <a href="../test-driven-development/">Test Driven Development(TDD)</a>, it contains how to run tests\nand how they fit in our testing strategy. It also contains more information about TDD and the methodology behind it. This\ndocument is a deeper dive into the unit test specifically.</p>',
frontmatter:{title:"Unit Testing",github:"https://github.com/enactjs/enact/blob/develop/docs/testing-components/unit-testing/index.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/developer-guide/testing-components/test-driven-development/"},frontmatter:{title:"Test Driven Development(TDD)"}}},{node:{fields:{slug:"/docs/developer-guide/testing-components/"},frontmatter:{title:"Testing Your Components"}}},{node:{fields:{slug:"/docs/developer-guide/testing-components/unit-testing/"},frontmatter:{title:"Unit Testing"}}}]},site:{siteMetadata:{title:"I18N & L10N"}},docsPages:{edges:[{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/modules/index.js",frontmatter:{title:"Getting Started"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Internationalization"}}}]}},pathContext:{slug:"/docs/developer-guide/testing-components/unit-testing/",title:"Unit Testing",parentRegex:"/\\/docs\\/developer-guide\\/testing-components(\\/[^/]*)?\\/$/"}}}});