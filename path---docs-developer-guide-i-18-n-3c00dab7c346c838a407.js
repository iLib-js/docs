webpackJsonp([81724378031375],{937:function(e,a){e.exports={data:{markdownRemark:{html:'<nav role="navigation" class="page-toc">\n<ul>\n<li><a href="#overview">Overview</a></li>\n<li><a href="#using-i18ndecorator">Using I18nDecorator</a></li>\n<li><a href="#locale-specific-css">Locale-Specific CSS</a></li>\n<li><a href="#translating-strings-using-l">Translating Strings using $L()</a></li>\n<li><a href="#updating-locale">Updating Locale</a></li>\n<li><a href="#ilib">iLib</a></li>\n<li><a href="#sample">Sample</a></li>\n</ul>\n</nav>\n<h2 id="overview"><a href="#overview" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>\n<p>This guide details how to use some of i18n library’s features. For an overview of the modules supplied with the library please see <a href="../../modules/i18n/I18nDecorator/">I18nDecorator</a> and <a href="../../modules/i18n/Text/">Text</a>. This library incorporates the <a href="https://github.com/iLib-js/iLib">iLib</a> internationalization library.</p>\n<h2 id="using-i18ndecorator"><a href="#using-i18ndecorator" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using I18nDecorator</h2>\n<p><code class="language-text">I18nDecorator</code> is a higher-order component (HOC) that provides easy access to locale information. Applications wishing to receive locale information can wrap the root component with the HOC. It is not necessary to use <code class="language-text">I18nDecorator</code> directly for applications using <code class="language-text">MoonstoneDecorator</code>.</p>\n<p>The HOC works by passing locale information to the app through <a href="https://reactjs.org/docs/context.html">context</a> and CSS classes. It passes three properties via context:</p>\n<ul>\n<li><code class="language-text">locale</code> - a string representing the current locale</li>\n<li><code class="language-text">rtl</code> - if <code class="language-text">true</code> then the locale is a right-to-left language</li>\n<li><code class="language-text">updateLocale</code> - a function to update the locale of the app</li>\n</ul>\n<p>When not using <code class="language-text">MoosntoneDecorator</code>, be sure to apply the classes passed from <code class="language-text">I18nDecorator</code> to the root component.</p>\n<h3 id="accessing-i18ndecorator-context-properties"><a href="#accessing-i18ndecorator-context-properties" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Accessing I18nDecorator context properties</h3>\n<p>The following example demonstrates using <code class="language-text">I18nContextDecorator</code> with a component:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>I18nContextDecorator<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@enact/i18n/I18nDecorator\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> SomeComponent <span class="token operator">=</span> <span class="token function">I18nContextDecorator</span><span class="token punctuation">(</span>\n\t<span class="token punctuation">{</span>rtlProp<span class="token operator">:</span> <span class="token string">\'rtl\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t\t<span class="token operator">&lt;</span>div<span class="token operator">></span>Hello <span class="token keyword">from</span> the <span class="token punctuation">{</span>context<span class="token punctuation">.</span>rtl <span class="token operator">?</span> <span class="token string">\'right\'</span> <span class="token operator">:</span> <span class="token string">\'left\'</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="locale-specific-css"><a href="#locale-specific-css" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Locale-Specific CSS</h2>\n<p>When the <code class="language-text">I18nDecorator</code> wraps your app, it automatically applies some CSS\nclasses to the root element.  You can use these to write locale-specific CSS\noverride classes using the <code class="language-text">global</code> specifier.  These classes may indicate\nthings such as whether the locale uses a right-to-left orientation or whether\nit uses non-Latin fonts.</p>\n<p>Classes added to the body include:</p>\n<ul>\n<li>\n<p><code class="language-text">enact-locale-non-latin</code>, if the locale uses a non-Latin font</p>\n</li>\n<li>\n<p><code class="language-text">enact-locale-right-to-left</code>, if the locale is oriented right-to-left (in the\nabsence of this class, the default orientation is left-to-right)</p>\n</li>\n<li>\n<p><code class="language-text">enact-locale-non-italic</code>, if the locale uses a script that is not typically\nitalicized, such as Chinese or Thai.  (You may also use this in your own\nclasses to enable or disable italicization.)</p>\n</li>\n</ul>\n<p>The following classes allow you to switch functionality based on the language,\nscript, or region of the current UI locale:</p>\n<ul>\n<li><code class="language-text">enact-locale-&lt;language&gt;</code></li>\n<li><code class="language-text">enact-locale-&lt;script&gt;</code></li>\n<li><code class="language-text">enact-locale-&lt;region&gt;</code></li>\n<li><code class="language-text">enact-locale-&lt;language&gt;-&lt;script&gt;</code></li>\n<li><code class="language-text">enact-locale-&lt;language&gt;-&lt;region&gt;</code></li>\n<li><code class="language-text">enact-locale-&lt;language&gt;-&lt;script&gt;-&lt;region&gt;</code></li>\n</ul>\n<p>So for United States English you would see this <code class="language-text">enact-locale-en enact-locale-en-US enact-locale-US</code>.</p>\n<p>Here’s an example from the Moonstone package in which locale-specific CSS is\nused to turn on right-to-left orientation for a widget:</p>\n<div class="gatsby-highlight" data-language="css">\n      <pre class="language-css"><code class="language-css">\t<span class="token selector">:global(.enact-locale-right-to-left) &amp;</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">flex-direction</span><span class="token punctuation">:</span> row-reverse<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span></code></pre>\n      </div>\n<blockquote>\n<p>NOTE: We’re using LESS and CSS modules, which are supported by the enact command line tool</p>\n</blockquote>\n<h2 id="translating-strings-using-l"><a href="#translating-strings-using-l" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Translating Strings using $L()</h2>\n<p><code class="language-text">$L()</code> is a convenience function wrapping <code class="language-text">ilib/ResBundle</code> that is exported by the\nmain Enact library.</p>\n<p>It can be used as follows:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> $<span class="token constant">L</span> <span class="token keyword">from</span> <span class="token string">\'@enact/i18n/$L\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> translatedString <span class="token operator">=</span> $<span class="token constant">L</span><span class="token punctuation">(</span><span class="token string">\'Some String\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// You can also use it inside jsx</span>\n<span class="token operator">&lt;</span>Panel title<span class="token operator">=</span><span class="token punctuation">{</span>$<span class="token constant">L</span><span class="token punctuation">(</span><span class="token string">\'Some Title\'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n\t<span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>$<span class="token constant">L</span><span class="token punctuation">(</span><span class="token string">\'Some Children\'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\t<span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>translatedString<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Panel<span class="token operator">></span></code></pre>\n      </div>\n<p>In order for the translations to be successful, a locale-specific translation file must be available. If a suitable translation cannot be found, the original string will be returned.</p>\n<p>Each translatable string in your application should be wrapped in a call to\n<code class="language-text">$L()</code>.</p>\n<p>You will need to extract the strings inside the <code class="language-text">$L()</code> calls in your source\ncode and write them out to a <code class="language-text">strings.json</code> file for each locale.  (Most likely\nyou’ll want to create a script to do this.)</p>\n<p>The <code class="language-text">strings.json</code> files should contain the translations in JSON format, i.e.:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n\t<span class="token property">"source string1"</span><span class="token operator">:</span> <span class="token string">"translated string1"</span><span class="token punctuation">,</span>\n\t<span class="token property">"source string2"</span><span class="token operator">:</span> <span class="token string">"translated string2"</span><span class="token punctuation">,</span>\n\t...\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Many localization companies are able to provide translations in this format.</p>\n<p>The string returned from a call to <code class="language-text">$L()</code> will be the translated string for the\ncurrent UI locale. If a different locale or a bundle with a different name is\nneeded, use <code class="language-text">ResBundle</code> directly instead of <code class="language-text">$L()</code>.</p>\n<p>Translation files should be placed into locale specific directories and added to the <code class="language-text">resources/ilibmanifest.json</code> file:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n\t<span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"en/US/strings.json"</span><span class="token punctuation">,</span> <span class="token string">"ja/JP/strings.json"</span><span class="token punctuation">,</span> ...<span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="updating-locale"><a href="#updating-locale" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Updating Locale</h2>\n<p>If you wish to learn how to programmatically change the locale, please see <a href="./updating-locale/">Updating Locale</a>.</p>\n<h2 id="ilib"><a href="#ilib" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>iLib</h2>\n<p>iLib provides the locale-specific features of i18n. If you wish to learn about some of the other things it can do, like string translation, string/number formatting, etc., please see <a href="./ilib/">iLib Docs</a>.</p>\n<h2 id="sample"><a href="#sample" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sample</h2>\n<p>A sample i18n app is available <a href="https://github.com/enactjs/samples/tree/master/pattern-locale-switching">here</a>.</p>',frontmatter:{title:"i18n (Internationalization)",github:"https://github.com/enactjs/enact/blob/develop/packages/i18n/docs/index.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/developer-guide/accessibility/"},frontmatter:{title:"Accessibility Support in Enact"}}},{node:{fields:{slug:"/docs/developer-guide/resources/"},frontmatter:{title:"Additional Developer Resources"}}},{node:{fields:{slug:"/docs/developer-guide/contributing/"},frontmatter:{title:"Contribution Guide"}}},{node:{fields:{slug:"/docs/developer-guide/creating-components/"},frontmatter:{title:"Creating Components the Enact Way"}}},{node:{fields:{slug:"/docs/developer-guide/best-practices/"},frontmatter:{title:"Enact Best Practices"}}},{node:{fields:{slug:"/docs/developer-guide/performance/"},frontmatter:{title:"Enact Performance Guide"}}},{node:{fields:{slug:"/docs/developer-guide/glossary/"},frontmatter:{title:"Glossary"}}},{node:{fields:{slug:"/docs/developer-guide/migration/"},frontmatter:{title:"Migration Guides"}}},{node:{fields:{slug:"/docs/developer-guide/redux/"},frontmatter:{title:"Redux"}}},{node:{fields:{slug:"/docs/developer-guide/spotlight/"},frontmatter:{title:"Spotlight"}}},{node:{fields:{slug:"/docs/developer-guide/testing-components/"},frontmatter:{title:"Testing Your Components"}}},{node:{fields:{slug:"/docs/developer-guide/theming/"},frontmatter:{title:"Theming"}}},{node:{fields:{slug:"/docs/developer-guide/interoperability/"},frontmatter:{title:"Using Enact with Third-party Libraries"}}},{node:{fields:{slug:"/docs/developer-guide/why-use-kind/"},frontmatter:{title:"Why Use kind()?"}}},{node:{fields:{slug:"/docs/developer-guide/i18n/"},frontmatter:{title:"i18n (Internationalization)"}}},{node:{fields:{slug:"/docs/developer-guide/webos/"},frontmatter:{title:"webOS Support Module"}}}]},site:{siteMetadata:{title:"I18N & L10N"}},docsPages:{edges:[{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/modules/index.js",frontmatter:{title:"Getting Started"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Internationalization"}}}]}},pathContext:{slug:"/docs/developer-guide/i18n/",title:"i18n (Internationalization)",parentRegex:"/\\/docs\\/developer-guide(\\/[^/]*)?\\/$/"}}}});