webpackJsonp([0xbd7e32a3b04a],{977:function(e,t){e.exports={data:{markdownRemark:{html:'<nav role="navigation" class="page-toc">\n<ul>\n<li><a href="#what-is-prerendering">What is “Prerendering”?</a></li>\n<li><a href="#why-prerender">Why Prerender?</a></li>\n<li><a href="#how-to-create-an-isomorphic-build">How to Create an Isomorphic Build</a></li>\n<li><a href="#prerendering-in-specific-locales">Prerendering in Specific Locales</a></li>\n<li><a href="#how-it-works">How It Works</a></li>\n</ul>\n</nav>\n<p>Isomorphic code layout is a special feature which builds projects in a JavaScript layout that can be potentially processed by any environment, such as <a href="https://nodejs.org">NodeJS</a> or the browser. One main benefit is that this code can be evaluated at build-time and prerendered into the HTML document ahead of time. When the isomorphic option is used, prerendering will be attempted.</p>\n<h2 id="what-is-prerendering"><a href="#what-is-prerendering" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What is “Prerendering”?</h2>\n<p>Prerendering, with regards to Enact apps, means that we render out the initial state at build time.  The app’s initial state is rendered via React into an HTML string and embedded statically into the <strong>index.html</strong> file.</p>\n<h2 id="why-prerender"><a href="#why-prerender" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why Prerender?</h2>\n<p>Having the initial app state as HTML allows the app to be visible as soon as the HTML is rendered. We don’t have to wait for the JavaScript to be fetched, parsed, and executed to see the general app layout.  Furthermore, once the JavaScript does load, the underlying React core will recognize the HTML and just add event listeners; no extra rendering needs to be done. The end result is the appearance of significantly faster app load time.</p>\n<h2 id="how-to-create-an-isomorphic-build"><a href="#how-to-create-an-isomorphic-build" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to Create an Isomorphic Build</h2>\n<p>Within your <strong>package.json</strong> file, add an <code class="language-text">isomorphic</code> property to the <code class="language-text">enact</code> object:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    ...\n    <span class="token property">"enact"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        ...\n        <span class="token property">"isomorphic"</span><span class="token operator">:</span><span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n    ...\n<span class="token punctuation">}</span> </code></pre>\n      </div>\n<p>If the value is a string filepath instead, it will use that file as the main app entry point instead of the default. Whatever the entry point, ensure it exports the <code class="language-text">ReactElement</code> in non-browser environments. Additionally, ensure the entry point also conditionally renders to to the DOM if the <code class="language-text">window</code> is available.  An example <strong>index.js</strong> entry point can be see <a href="https://github.com/enactjs/templates/blob/master/packages/moonstone/template/src/index.js">here</a> and is the default included in the Enact app template.</p>\n<p>Then, you can choose to build with isomorphic code layout by adding the <code class="language-text">--isomorphic</code> flag to the pack command:</p>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">enact pack --isomorphic\n<span class="token function">npm</span> pack -- --isomorphic\n<span class="token function">npm</span> pack-p -- --isomorphic</code></pre>\n      </div>\n<h3 id="when-to-build-isomorphically"><a href="#when-to-build-isomorphically" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>When to Build Isomorphically</h3>\n<p>By default, the Enact CLI will not use isomorphic code layout, and it should not be considered part of the regular development workflow. It is advisable to only build in isomorphic format when you want to test isomorphic features or in production mode builds.</p>\n<h3 id="how-to-debug-when-prerendering-fails"><a href="#how-to-debug-when-prerendering-fails" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to Debug When Prerendering Fails</h3>\n<p>If prerendering fails, there will be a stack trace printed to the console and the build will continue without prerendering.  It’s useful to build in development mode so that you can use the stack trace to determine where in the code the issue lies without any minification getting in the way.</p>\n<p>Generally, when a prerender fails, it’s due to <code class="language-text">window</code> or <code class="language-text">document</code> being used during initial state creation (prior to mounting). Leave all access of those globals until after mount or wrap in an if-statement to check global variable existence.</p>\n<blockquote>\n<p><strong>Important Note</strong>:\nPrerendering requires an app to be coded such that it does not require access to <code class="language-text">window</code> or <code class="language-text">document</code> to create its initial state. The act of prerendering take place in a Node-based environment, so neither <code class="language-text">window</code> nor <code class="language-text">document</code> are available.\nIf your app must use <code class="language-text">document</code> or <code class="language-text">window</code> in creation of its initial state, be sure to wrap those in if-statements to avoid prerender failure. For example:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token comment">// able to access window</span>\n   <span class="token punctuation">}</span> </code></pre>\n      </div>\n</blockquote>\n<h2 id="prerendering-in-specific-locales"><a href="#prerendering-in-specific-locales" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Prerendering in Specific Locales</h2>\n<p>While the app content built with Enact is designed to run for all locales, the prerendered <strong>index.html</strong> content is based on the <code class="language-text">en-US</code> locale. While the page should load correctly on other locales, the <code class="language-text">en-US</code>-based content will be visible to the user until the app is fully loaded/executed. Enact CLI provides command line options to alter and customize the locales that should be prerendered.  The <code class="language-text">-l</code>/<code class="language-text">--locales</code> option accepts a comma-separated list of locales, path to a file containing a JSON array of desired locales, or a preset name (e.g. <code class="language-text">tv</code>, <code class="language-text">signage</code>, <code class="language-text">none</code>, etc.). For example:</p>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">enact pack -i --locales<span class="token operator">=</span>en-US,ko-KR\nenact pack -i --locales<span class="token operator">=</span>my-locales.json\nenact pack -i --locales<span class="token operator">=</span>tv</code></pre>\n      </div>\n<p>When multiple locales are specified for prerendering, each locale is evaluated into its own HTML file (<strong>index.en-US.html</strong>, <strong>index.ko-KR.html</strong>, etc.) with a non-prerendered <strong>index.html</strong> file as a fallback. Deduping is applied to simplify and minify the number of HTML files output, simplifying by root language and across languages themselves. Additionally, with full webOS support, locale-specific <strong>appinfo.json</strong> files will be generated to correctly target locale-specific app entry points.</p>\n<h2 id="how-it-works"><a href="#how-it-works" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How It Works</h2>\n<p>With an isomorphic build, the app is built in a special pseudo-library layout, in a universal module definition (<a href="https://github.com/umdjs//">UMD</a>) format. In a Node environment, the top-level export is the <code class="language-text">ReactElement</code> export of the ‘isomorphic’ file. In a browser environment, the app executes normally.</p>\n<p>During the build process, a custom webpack plugin, <code class="language-text">PrerenderPlugin</code>, will access the build within its Node environment and use React’s <a href="https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostring"><code class="language-text">ReactDOMServer</code></a> to render the initial state of the app into an HTML string and inject that into the <strong>index.html</strong> file, within the <code class="language-text">root</code> ID <code class="language-text">div</code> element.  This is the same API used in server-side rendering.</p>\n<p>When the webpage loads up in a browser environment, the built JavaScript is loaded normally (and is expected to render itself into the HTML), except React will detect the DOM tree and will simply attach event listeners and go through the React lifecycle methods.</p>',frontmatter:{title:"Isomorphic Support",github:"https://github.com/enactjs/cli/blob/develop/docs/isomorphic-support.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/developer-tools/cli/installation/"},frontmatter:{title:"Installation"}}},{node:{fields:{slug:"/docs/developer-tools/cli/starting-a-new-app/"},frontmatter:{title:"Starting a New App"}}},{node:{fields:{slug:"/docs/developer-tools/cli/loading-existing-app/"},frontmatter:{title:"Loading an Existing App"}}},{node:{fields:{slug:"/docs/developer-tools/cli/building-apps/"},frontmatter:{title:"Building Apps"}}},{node:{fields:{slug:"/docs/developer-tools/cli/isomorphic-support/"},frontmatter:{title:"Isomorphic Support"}}},{node:{fields:{slug:"/docs/developer-tools/cli/serving-apps/"},frontmatter:{title:"Serving Apps"}}},{node:{fields:{slug:"/docs/developer-tools/cli/testing-apps/"},frontmatter:{title:"Testing Apps"}}},{node:{fields:{slug:"/docs/developer-tools/cli/ejecting-apps/"},frontmatter:{title:"Ejecting Apps"}}},{node:{fields:{slug:"/docs/developer-tools/cli/template-management/"},frontmatter:{title:"Template Management"}}},{node:{fields:{slug:"/docs/developer-tools/cli/developing-a-template/"},frontmatter:{title:"Developing a Template"}}},{node:{fields:{slug:"/docs/developer-tools/cli/"},frontmatter:{title:"Enact CLI Development Tool"}}}]},site:{siteMetadata:{title:"Enact"}},docsPages:{edges:[{node:{path:"/docs/developer-guide/",context:{title:null}}},{node:{path:"/docs/developer-tools/",context:{title:null}}},{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/developer-guide/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/developer-guide/index.js",frontmatter:{title:"Developer Guide"}}},{node:{fields:{slug:"/docs/developer-tools/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/developer-tools/index.js",frontmatter:{title:"Developer Tools"}}},{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/modules/index.js",frontmatter:{title:"API Libraries"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Tutorials"}}}]}},pathContext:{slug:"/docs/developer-tools/cli/isomorphic-support/",title:"Isomorphic Support",parentRegex:"/\\/docs\\/developer-tools\\/cli(\\/[^/]*)?\\/$/"}}}});