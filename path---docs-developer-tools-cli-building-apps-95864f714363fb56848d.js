webpackJsonp([0x615234eeb7d7],{961:function(e,t){e.exports={data:{markdownRemark:{html:'<nav role="navigation" class="page-toc">\n<ul>\n<li><a href="#packaging-source-code">Packaging Source Code</a></li>\n<li><a href="#production-mode">Production Mode</a></li>\n<li><a href="#browser-support--polyfills">Browser Support &#x26; Polyfills</a></li>\n<li><a href="#__dev__-keyword">__DEV__ Keyword</a></li>\n<li><a href="#environment-variable-injection">Environment Variable Injection</a></li>\n<li><a href="#typescript-support">TypeScript Support</a></li>\n<li><a href="#isomorphic-support--prerendering">Isomorphic Support &#x26; Prerendering</a></li>\n<li><a href="#v8-snapshot-generation">V8 Snapshot Generation</a></li>\n<li><a href="#watcher-option">Watcher Option</a></li>\n<li><a href="#stats-analysis">Stats Analysis</a></li>\n</ul>\n</nav>\n<h2 id="packaging-source-code"><a href="#packaging-source-code" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Packaging Source Code</h2>\n<div class="gatsby-highlight" data-language="none">\n      <pre class="language-none"><code class="language-none">  Usage\n    enact pack [options]\n\n  Options\n    -p, --production  Build in production mode\n    -i, --isomorphic  Use isomorphic code layout\n                      (includes prerendering)\n    -w, --watch       Rebuild on file changes\n    -l, --locales     Locales for isomorphic mode; one of:\n            <comma-separated-values> Locale list\n            <JSON-filepath> - Read locales from JSON file\n            "none" - Disable locale-specific handling\n            "used" - Detect locales used within ./resources/\n            "tv" - Locales supported on webOS TV\n            "signage" - Locales supported on webOS signage\n            "all" - All locales that iLib supports\n    -s, --snapshot    Generate V8 snapshot blob\n                      (requires V8_MKSNAPSHOT set)\n    --stats           Output bundle analysis file</code></pre>\n      </div>\n<p>Run within an Enact project’s source code, the <code class="language-text">enact pack</code> command (aliased as <code class="language-text">npm run pack</code> or <code class="language-text">npm run pack-p</code> for production) will process and bundle the js, css, and asset files into the <code class="language-text">./dist</code> directory. An <strong>index.html</strong> file will be dynamically generated.</p>\n<h2 id="production-mode"><a href="#production-mode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Production Mode</h2>\n<p>By default, projects will build in development mode. When you’re code is ready for deployment you can build in production mode. Production mode will minify the source code and remove dead code, along with numerous other minor code optimization strategies.</p>\n<h2 id="browser-support--polyfills"><a href="#browser-support--polyfills" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Browser Support &#x26; Polyfills</h2>\n<p>The Enact CLI is designed to be compatible with a wide array of browsers and devices. <a href="https://github.com/browserslist/browserslist">Browserslist standard</a> is used to handle targeting, with Enact’s defaults being:</p>\n<ul>\n<li>\n<blockquote>\n<p>1%</p>\n</blockquote>\n</li>\n<li>last 2 versions</li>\n<li>last 5 Chrome versions</li>\n<li>last 5 Firefox versions</li>\n<li>Firefox ESR</li>\n<li>not ie &#x3C; 12</li>\n<li>not ie_mob &#x3C; 12</li>\n<li>not dead</li>\n</ul>\n<p>For all projects built with Enact CLI, <code class="language-text">core-js</code> polyfill is automatically included, so that all stable ECMAScript features are polyfilled across all target browsers. This means that only what’s needed will be transpiled or polyfilled from <code class="language-text">core-js</code>. The Browserslist settings can be narrowed or widened at will via <a href="https://github.com/browserslist/browserslist#queries"><code class="language-text">package.json</code> settings or <code class="language-text">BROWSERSLIST</code> environment variable</a>. This means the newer the targeted browsers, the fewer the polyfills and less required transpiling.</p>\n<p>However keep in mind that <code class="language-text">core-js</code> is solely for ECMAScript and does not polyfill any browser features. Features like this will need to be manually polyfilled in projects with app-level imports.  For example, to add web animation API, you could add the NPM dependency <a href="https://github.com/web-animations/web-animations-js"><code class="language-text">web-animations-js</code></a> and import it at the top of your app’s root <strong><code class="language-text">index.js</code></strong> source file.</p>\n<p>Note: Some ui libraries, like Moonstone, may have their own recommended supported browsers and may differ from the core Enact framework.</p>\n<h2 id="__dev__-keyword"><a href="#__dev__-keyword" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>__DEV__ Keyword</h2>\n<p>In order to make development and debugging simpler, the enact cli supports a special <code class="language-text">__DEV__</code> keyword in both javascript and LESS.</p>\n<p>In javascript, for example:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'This is a development build\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>In development mode, the code will execute correctly, whereas in production mode it will get caught and removed as unused dead code. This allows for custom development-only debug code.</p>\n<p>Similarly, in LESS:</p>\n<div class="gatsby-highlight" data-language="css">\n      <pre class="language-css"><code class="language-css">\tdiv when <span class="token punctuation">(</span><span class="token atrule"><span class="token rule">@__DEV__</span> = true<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n\t\t<span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>In development mode, the LESS remains intact and used, but in production mode, the <code class="language-text">@__DEV__</code> variable is false and the CSS isn’t output. This allows for custom development-only styling. See LESS’s <a href="http://lesscss.org/features/#css-guards-feature">CSS Guards</a> for more details on usage.</p>\n<h2 id="environment-variable-injection"><a href="#environment-variable-injection" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Environment Variable Injection</h2>\n<p>Some scenarios may require sensitive or dynamic data to be kept outside a project itself.  All environment variables that are prefixed with <code class="language-text">REACT_APP_</code> will be supported for injection into the app output. For example, with <code class="language-text">REACT_APP_MYVAR=&quot;Hello World&quot;</code> environment variable, usage of <code class="language-text">process.env.REACT_APP_MYVAR</code> will be replaced with <code class="language-text">&quot;Hello World&quot;</code>.</p>\n<p>Furthermore, Enact CLI supports a hierarchical <code class="language-text">.env</code> format for declaring environment variables within a file.</p>\n<p>The following <code class="language-text">.env</code> files will be processed, in overriding order:</p>\n<ul>\n<li><code class="language-text">.env</code>: Default.</li>\n<li><code class="language-text">.env.local</code>: Local overrides. <strong>This file is loaded for all environments except test.</strong></li>\n<li><code class="language-text">.env.development</code>, <code class="language-text">.env.test</code>, <code class="language-text">.env.production</code>: Environment-specific settings.</li>\n<li><code class="language-text">.env.development.local</code>, <code class="language-text">.env.test.local</code>, <code class="language-text">.env.production.local</code>: Local overrides of environment-specific settings.</li>\n</ul>\n<p>Ideally <code class="language-text">.env</code> files <strong>should be</strong> checked into source control (with the exclusion of <code class="language-text">.env*.local</code>).</p>\n<p>Each <code class="language-text">.env</code> file supports internal variable expansion to allow for composing complex dynamic variables. For example:</p>\n<div class="gatsby-highlight" data-language="none">\n      <pre class="language-none"><code class="language-none">REACT_APP_NAME=foobar\nREACT_APP_PATH=example/$REACT_APP_NAME</code></pre>\n      </div>\n<p>Note: Changing any environment variables will require you to restart the development server if it is running.</p>\n<h2 id="typescript-support"><a href="#typescript-support" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TypeScript Support</h2>\n<p><a href="https://www.typescriptlang.org">TypeScript</a> syntax support is an optional feature.  All TypeScript-based code will be automatically transpiled like normal JavaScript and packaged by Enact CLI with no additional user setup needed. However, this does not include enforced type-checking, solely the syntax transpiling.  Type-checking will occur automatically at build time, however the <code class="language-text">typescript</code> dependency must be on the project itself.  You’ll also want to install type definition packages for React, ReactDOM, and Jest.</p>\n<p>It’s easiest to begin from the start with TypeScript by using the <code class="language-text">typescript</code> template (<code class="language-text">@enact/template-typescript</code> on NPM). To add TypeScript support to an existing project:</p>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save typescript @types/react @types/react-dom @types/jest</code></pre>\n      </div>\n<p>Optionally, <a href="https://palantir.github.io/tslint/">TSLint</a> can be installed globally or locally and configured within a project to enable linting support within the <code class="language-text">enact lint</code> command.</p>\n<h2 id="isomorphic-support--prerendering"><a href="#isomorphic-support--prerendering" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Isomorphic Support &#x26; Prerendering</h2>\n<p>By using the isomorphic code layout option, your project bundle will be outputted in a versatile universal code format allowing potential usage outside the browser. The Enact CLI takes advantage of this mode by additionally generating an HTML output of your project and embedding it directly with the resulting <strong>index.html</strong>. By default, isomorphic mode will attempt to prerender only <code class="language-text">en-US</code>, however with the <code class="language-text">--locales</code> option, a wade variety of locales can be specified and prerendered. More details on isomorphic support and its limitations can be found <a href="../isomorphic-support/">here</a>.</p>\n<h2 id="v8-snapshot-generation"><a href="#v8-snapshot-generation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>V8 Snapshot Generation</h2>\n<p>The v8 snapshot blob creation feature is highly experimental and temperamental depending on your code. It is considered an extension of the isomorphic code layout, bringing along all the same requirements. Given the highly-specific nature of a v8 snapshot blob being tied to particular versions of Chrome/Chromium/Electron/etc., developers must provide their own copy of the <code class="language-text">mksnapshot</code> binary and have its filepath set to the <code class="language-text">V8_MKSNAPSHOT</code> environment variable.</p>\n<h2 id="watcher-option"><a href="#watcher-option" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Watcher Option</h2>\n<p>Similar to the <a href="../serving-apps/"><code class="language-text">enact serve</code></a> command, the watcher will build the project and wait for any detected source code changes. When a change is detected, it will rebuild the project. The rebuild time will be significantly faster since the process can actively cache and build only what has changed.</p>\n<h2 id="stats-analysis"><a href="#stats-analysis" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Stats Analysis</h2>\n<p>The Bundle analysis file option uses the popular <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a> to create a visual representation of the project build to <strong>stats.html</strong>, showing the full module hierarchy arranged by output size. This can be very useful in determining where bloat is coming from or finding dependencies that may have been included by mistake.</p>',frontmatter:{title:"Building Apps",github:"https://github.com/enactjs/cli/blob/develop/docs/building-apps.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/developer-tools/cli/installation/"},frontmatter:{title:"Installation"}}},{node:{fields:{slug:"/docs/developer-tools/cli/starting-a-new-app/"},frontmatter:{title:"Starting a New App"}}},{node:{fields:{slug:"/docs/developer-tools/cli/loading-existing-app/"},frontmatter:{title:"Loading an Existing App"}}},{node:{fields:{slug:"/docs/developer-tools/cli/building-apps/"},frontmatter:{title:"Building Apps"}}},{node:{fields:{slug:"/docs/developer-tools/cli/isomorphic-support/"},frontmatter:{title:"Isomorphic Support"}}},{node:{fields:{slug:"/docs/developer-tools/cli/serving-apps/"},frontmatter:{title:"Serving Apps"}}},{node:{fields:{slug:"/docs/developer-tools/cli/testing-apps/"},frontmatter:{title:"Testing Apps"}}},{node:{fields:{slug:"/docs/developer-tools/cli/ejecting-apps/"},frontmatter:{title:"Ejecting Apps"}}},{node:{fields:{slug:"/docs/developer-tools/cli/template-management/"},frontmatter:{title:"Template Management"}}},{node:{fields:{slug:"/docs/developer-tools/cli/developing-a-template/"},frontmatter:{title:"Developing a Template"}}},{node:{fields:{slug:"/docs/developer-tools/cli/"},frontmatter:{title:"Enact CLI Development Tool"}}}]},site:{siteMetadata:{title:"I18N & L10N"}},docsPages:{edges:[{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Internationalization"}}},{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/modules/index.js",frontmatter:{title:"Getting Started"}}}]}},pathContext:{slug:"/docs/developer-tools/cli/building-apps/",title:"Building Apps",parentRegex:"/\\/docs\\/developer-tools\\/cli(\\/[^/]*)?\\/$/"}}}});