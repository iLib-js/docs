webpackJsonp([0x687dedc5b827],{834:function(e,t){e.exports={data:{markdownRemark:{html:'<p>Hang on to your hats, we’re going to write some code and get this app running! In this section, we’re going to <a href="#building-the-app-module">create our first module</a>, <a href="#rendering-the-app">see how the application is rendered</a> into the DOM, and <a href="#running-the-app">bundle and run the app</a>.  Let’s get started.</p>\n<h2 id="building-the-app-module"><a href="#building-the-app-module" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Building the App module</h2>\n<p>The main entry point of our application is in <code class="language-text">./src/index.js</code>. While you could include all of your code there, what kind of example would you be setting for other programmers? Instead, we’ll create a new module that will be home to our application component.</p>\n<blockquote>\n<p>A module in CommonJS can either refer to a single file directly or a directory which will ultimately resolve to a single file. Node.js defines a <a href="https://nodejs.org/api/modules.html#modules_all_together">set of rules</a> for resolving module references and webpack has its own <a href="https://webpack.js.org/configuration/resolve">set of configurations</a> to customize module resolution. The more you know!</p>\n</blockquote>\n<p>The Enact team recommends that any module created for an application:</p>\n<ul>\n<li>be placed in its own directory — e.g. <code class="language-text">./src/App</code></li>\n<li>contains a source file with the same name that contains the core logic — e.g. <code class="language-text">./src/App/App.js</code></li>\n<li>contains a <code class="language-text">package.json</code> with its <code class="language-text">main</code> property pointing to that file</li>\n</ul>\n<h3 id="the-modules-code-classlanguage-textpackagejsoncode"><a href="#the-modules-code-classlanguage-textpackagejsoncode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Module’s <code class="language-text">package.json</code></h3>\n<p>The <code class="language-text">package.json</code> for most modules will be simple and only contain the <code class="language-text">main</code> property. It can include any of the supported properties for a <a href="http://wiki.commonjs.org/wiki/Packages/1.1#Package_Descriptor_File">package descriptor file</a>.</p>\n<p>Let’s create a file named <code class="language-text">./src/App/package.json</code> and give it the following contents:</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">{\n\t&quot;main&quot;: &quot;App.js&quot;\n}</code></pre>\n      </div>\n<h3 id="the-modules-source-file"><a href="#the-modules-source-file" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Module’s Source File</h3>\n<p>Now to get to some real code! Let’s create a <code class="language-text">./src/App/App.js</code> mighty enough to contain the source code. Here’s the complete source:</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">import React from &#39;react&#39;;\n\nconst App = function () {\n\treturn (\n\t\t&lt;div&gt;\n\t\t\tHello, Enact!\n\t\t&lt;/div&gt;\n\t);\n};\n\nexport default App;\nexport {App};</code></pre>\n      </div>\n<p>Don’t worry about trying to absorb all that at once, we’ll break it down, piece-by-piece.</p>\n<blockquote>\n<p>You’ll notice that we’ve removed much of the boilerplate code that was created in this file by the <code class="language-text">enact</code> command line tool. We’ll be slowly adding it back in order to introduce the concepts incrementally.</p>\n</blockquote>\n<h4 id="code-classlanguage-textimportcode-and-react"><a href="#code-classlanguage-textimportcode-and-react" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="language-text">import</code> and React</h4>\n<p>The first step is to <code class="language-text">import</code> our dependencies for this component. The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"><code class="language-text">import</code> statement</a> is a new feature introduced with ES6 modules (<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-imports">spec</a>).</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">import React from &#39;react&#39;;</code></pre>\n      </div>\n<p>We only have a single import right now but it’s a very important one. With Enact, we’ve decided to build on top of the very popular <a href="https://facebook.github.io/react">React library</a> from Facebook. The <code class="language-text">react</code> module provides the tools necessary to create and compose components. Rendering is handled by another module, <code class="language-text">react-dom</code>, which will be discussed <a href="#rendering-the-app">later</a>.</p>\n<!-- link to a "why" post --> \n<h4 id="app-component"><a href="#app-component" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>App component</h4>\n<p>You may not know it, but <code class="language-text">App</code> is a component.  The simplest type of React component is a <a href="https://facebook.github.io/react/docs/reusable-components.html#stateless-functions">Stateless Function</a> that accepts a <code class="language-text">props</code> object and returns a <a href="https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html">React element</a>. For this first version of Hello Enact!, we do not accept any properties so we can safely omit that argument. Instead, we will render the greeting within a <code class="language-text">&lt;div&gt;</code> DOM node.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">const App = function () {\n\treturn (\n\t\t&lt;div&gt;\n\t\t\tHello, Enact!\n\t\t&lt;/div&gt;\n\t);\n};</code></pre>\n      </div>\n<p>There are several interesting points in this little block of code so let’s look a little deeper.</p>\n<blockquote>\n<p>React supports two types of components — those created with <a href="https://facebook.github.io/react/docs/reusable-components.html#es6-classes">ES6 classes</a> and Stateless Functions. Both of these will be covered in more detail later on.  Don’t be impatient!</p>\n</blockquote>\n<h5 id="code-classlanguage-textconstcode-vs-code-classlanguage-textletcode"><a href="#code-classlanguage-textconstcode-vs-code-classlanguage-textletcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="language-text">const</code> vs <code class="language-text">let</code></h5>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"><code class="language-text">const</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"><code class="language-text">let</code></a> are two new statements for declaring variables in ES6 (<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-let-and-const-declarations">spec</a>). <code class="language-text">const</code> creates a read-only reference to a value and <code class="language-text">let</code> creates a mutable reference to a value. Both are <a href="http://www.2ality.com/2015/02/es6-scoping.html">block-scoped statements</a> rather than global- or function-scoped like <code class="language-text">var</code>.</p>\n<blockquote>\n<p>In Enact, we recommend using <strong><code class="language-text">const</code> by default</strong> and <code class="language-text">let</code> only when you determine you need to change the reference.</p>\n</blockquote>\n<p> \tconst App = function () {</p>\n<p>Here we’re defining <code class="language-text">App</code> as a <code class="language-text">const</code> referring to a function that will render our application component.</p>\n<h5 id="composing-components"><a href="#composing-components" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Composing Components</h5>\n<p>In React, every component’s <a href="https://facebook.github.io/react/docs/component-specs.html#render">render method</a> must either return a single root element (which can contain zero or more children) or <code class="language-text">null</code>. The root element must be either a DOM node (like <code class="language-text">&lt;div&gt;</code>) or a custom component (like we’re creating right now). The root element in turn can contain strings or numbers in addition to DOM nodes and custom components.</p>\n<p>Our Hello, Enact! app contains a <code class="language-text">&lt;div&gt;</code> as its root element and a single string child, <code class="language-text">Hello, Enact!</code>.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">\treturn (\n\t\t&lt;div&gt;\n\t\t\tHello, Enact!\n\t\t&lt;/div&gt;\n\t);</code></pre>\n      </div>\n<p>You’ll notice that by introducing <code class="language-text">&lt;div&gt;</code> we no longer have valid JavaScript! In fact, it looks a lot like valid HTML. That’s because React introduces <a href="https://facebook.github.io/react/docs/jsx-in-depth.html">JSX</a>, which is a JavaScript syntax extension. In order to make JSX runnable by the browser, it has to be converted to JavaScript. With Enact, this is handled during the build process using <a href="http://webpack.github.io">webpack</a> and <a href="http://babeljs.io">babel</a>. More on this <a href="#running-with-npm">later</a>.</p>\n<h4 id="exporting-the-app"><a href="#exporting-the-app" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exporting the App</h4>\n<p>Now that we’ve defined our component, the last step is to export it from the module so it can be consumed. This is accomplished with the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"><code class="language-text">export</code> statement</a>, which is another new feature in the ES6 modules <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-exports">spec</a>. You can export a value as the <code class="language-text">default</code> export of the module, a named export, or both!</p>\n<p>In most cases, each module will contain a single component which will be the default export. You can also export additional components, functions, or constants that might be useful for consumers of the component.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">export default App;\nexport {App};</code></pre>\n      </div>\n<blockquote>\n<p><strong>A note on named exports</strong></p>\n<p>Within the Enact framework, the default export is also included as a named export for compatibility with CommonJS consumers. With only the default export, a consumer using <code class="language-text">require()</code> would have to use the following syntax which is a bit awkward:</p>\n<p><code class="language-text">var App = require(&#39;./src/App&#39;).default</code></p>\n<p>By including a named export, you can use the more intuitive alternative:</p>\n<p><code class="language-text">var App = require(&#39;./src/App&#39;).App</code></p>\n</blockquote>\n<h2 id="rendering-the-app"><a href="#rendering-the-app" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rendering the App</h2>\n<p>With the App component ready, we can render it into the DOM. After this step, we’ll be clear of the boilerplate code and ready to start exploring the framework. The rendering logic will live within our application’s entry point, <code class="language-text">./src/index.js</code>. Here’s the complete code, which we’ll cover incrementally below:</p>\n<h3 id="srcindexjs"><a href="#srcindexjs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>./src/index.js</h3>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">import React from &#39;react&#39;;\nimport {render} from &#39;react-dom&#39;;\n\nimport App from &#39;./App&#39;;\n\nlet appElement = (&lt;App /&gt;);\n\n// In a browser environment, render instead of exporting\nif (typeof window !== &#39;undefined&#39;) {\n\trender(\n\t\tappElement,\n\t\tdocument.getElementById(&#39;root&#39;) // provided by Enact&#39;s HTML template\n\t);\n}\n\nexport default appElement;</code></pre>\n      </div>\n<blockquote>\n<p>The <code class="language-text">index.js</code> provided by the dev tools allows the <code class="language-text">App</code> component to be rendered into the DOM or imported into another\ncomponent.</p>\n</blockquote>\n<h3 id="react-and-reactdom"><a href="#react-and-reactdom" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React and ReactDOM</h3>\n<p>Like our App module, we’re importing React but we’re also importing a new module, <code class="language-text">react-dom</code>. <a href="https://facebook.github.io/react/docs/top-level-api.html#reactdom">ReactDOM</a> provides the means to transform a React component tree into a DOM tree. You’ll primarily be interested in the <a href="https://facebook.github.io/react/docs/top-level-api.html#reactdom.render"><code class="language-text">render()</code> method</a>.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">import React from &#39;react&#39;;\nimport {render} from &#39;react-dom&#39;;</code></pre>\n      </div>\n<p>The curly braces — <code class="language-text">{render}</code> — are used to import a named export from <code class="language-text">react-dom</code> rather than the default export. Alternatively, we could have imported the module as ReactDOM and called render() on that object for the same result:</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">import ReactDOM from &#39;react-dom&#39;;\nReactDOM.render( ... );</code></pre>\n      </div>\n<h3 id="importing-our-app"><a href="#importing-our-app" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Importing our App</h3>\n<p>Next, we’ll import our App module. We use relative paths (<code class="language-text">&#39;./App&#39;</code> instead of <code class="language-text">&#39;App&#39;</code>) for internal modules to distinguish them from external modules. We are also able to use the directory name rather than the full path to the source file based on App’s <code class="language-text">package.json</code>.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">import App from &#39;./App&#39;;</code></pre>\n      </div>\n<h3 id="render"><a href="#render" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>render()</h3>\n<p>Finally, we use <code class="language-text">render()</code> to render our App. It accepts a React element and a target DOM node. We’re using JSX again to create the React element for our App component and <code class="language-text">getElementById</code> returns our DOM node.</p>\n<p>You might have noticed, though, that we haven’t created an HTML document yet and that’s where Enact comes back into the picture. It will generate a default HTML file for our application during the build. It will contain <code class="language-text">&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code> in the body, which is where we can render our application.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">render(\n\t&lt;App /&gt;,\n\tdocument.getElementById(&#39;root&#39;)\n);</code></pre>\n      </div>\n<blockquote>\n<p>You may notice that it looks like we’re writing some HTML with an <App> element.  And, in fact, that’s exactly what we’ve done.  JSX treats our App component just like it’s an HTML element we can insert into markup.</p>\n</blockquote>\n<h2 id="running-the-app"><a href="#running-the-app" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Running the App</h2>\n<p>Enact provides several <code class="language-text">npm</code> scripts that ease working with apps.</p>\n<ul>\n<li><code class="language-text">npm run pack</code> - Bundles your application in the <code class="language-text">./dist</code> directory.</li>\n<li><code class="language-text">npm run pack-p</code> - Bundles your application for production (with minified source and without sourcemaps) in the <code class="language-text">./dist</code> directory.</li>\n<li><code class="language-text">npm run serve</code> - Bundles your application in memory, starts an HTTP server on port 8080 and serves your application. Whenever a source file changes, the app will be incrementally rebuilt with the changed file and the browser will automatically refresh (thanks to <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a>!).</li>\n<li><code class="language-text">npm run clean</code> - Removes <code class="language-text">./dist</code> and its contents</li>\n</ul>\n<p>You should be able to run <code class="language-text">npm run serve</code> now and, as we work through the rest of the guide, see the application reload with the new changes each time you save a file.</p>\n<h2 id="conclusion"><a href="#conclusion" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Conclusion</h2>\n<p>We’ve built the boilerplate Enact app and have it running using <code class="language-text">npm run serve</code>. Next up, in Part 2 of Hello, Enact!, we’ll add some style using CSS Modules.</p>\n<p><strong>Next: <a href="../adding-css/">Adding CSS</a></strong></p>',frontmatter:{title:"Enact Basics",github:"https://github.com/enactjs/docs/blob/develop/src/pages/docs/tutorials/tutorial-hello-enact/basics/index.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/basics/"},frontmatter:{title:"Enact Basics"}}},{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/adding-css/"},frontmatter:{title:"Adding CSS"}}},{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/"},frontmatter:{title:"Hello Enact!"}}},{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/kind/"},frontmatter:{title:"Introducing `kind()`"}}},{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/adding-moonstone-support/"},frontmatter:{title:"Adding Moonstone Support"}}}]},site:{siteMetadata:{title:"I18N & L10N"}},docsPages:{edges:[{node:{path:"/docs/developer-tools/",context:{title:null}}},{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/developer-tools/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/developer-tools/index.js",frontmatter:{title:"Developer Tools"}}},{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/modules/index.js",frontmatter:{title:"Getting Started"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Tutorials"}}}]}},pathContext:{slug:"/docs/tutorials/tutorial-hello-enact/basics/",title:"Enact Basics",parentRegex:"/\\/docs\\/tutorials\\/tutorial-hello-enact(\\/[^/]*)?\\/$/"}}}});