webpackJsonp([0x782547dab113],{956:function(n,a){n.exports={data:{markdownRemark:{html:'<nav role="navigation" class="page-toc">\n<ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#writing-customizable-components">Writing Customizable Components</a></li>\n<li><a href="#theme-creation-concepts">Theme Creation Concepts</a></li>\n</ul>\n</nav>\n<h2 id="introduction"><a href="#introduction" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>\n<p>When building your own theme, it’s important to understand how to leverage the many parts of Enact so you get the most out of your effort, get something that’s easy to maintain, and are able to extend it over time. We’ve built a bunch of useful things for achieving this, so let’s start to learn about them!</p>\n<h2 id="writing-customizable-components"><a href="#writing-customizable-components" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Writing Customizable Components</h2>\n<h3 id="publicclassnames"><a href="#publicclassnames" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>publicClassNames</h3>\n<p>Components built with the <code class="language-text">kind</code> feature can use the <code class="language-text">publicClassNames</code> key in the <code class="language-text">styles</code> block of their component definition. This key allows a component to define an array of CSS class names that will be available for a component consumer to add styling to. For brevity and convenience, if you simply specify <code class="language-text">true</code> as the value (<code class="language-text">publicClassNames: true</code>), every class from your CSS file will be exported and available. All components in <code class="language-text">@enact/ui</code> and many in <code class="language-text">@enact/moonstone</code> and other themes have already been imbued with this feature, which allows direct access to customize that component’s appearance.</p>\n<p>Sometimes, behavior is built into a component, but no visual qualities are assigned to that behavior. For example, Enact handles the <code class="language-text">selected</code> state of a <code class="language-text">Button</code>, and it’s implemented in our <code class="language-text">ui</code> package, so it’s universally available to all themes. <code class="language-text">ui</code> has no opinion on how this state is visually represented, so it simply exports a blank class that the consuming theme can style to its liking.</p>\n<p>Here’s a simplified example of <code class="language-text">ui/Button/Button.module.less</code>:</p>\n<div class="gatsby-highlight" data-language="css">\n      <pre class="language-css"><code class="language-css">// Button.module.less\n//\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"../styles/mixins.less"</span><span class="token punctuation">;</span></span>\n\n<span class="token selector">.button</span> <span class="token punctuation">{</span>\n\t<span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>\n\t<span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token selector">;\n\n\t// The background element of the Button, used on a child of the base element\n\t.bg</span> <span class="token punctuation">{</span>\n\t\t.<span class="token function">position</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token selector">.icon,\n\t&amp;.large,\n\t&amp;.small,\n\t// The selected state of the Button, applied to the base element\n\t&amp;.selected</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/* Public Class Names */</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><em>There is a small caveat here, which is that classes will not be exported if they do not have something in their rule-set, like the <code class="language-text">.selected</code> class. It must have that CSS comment `/</em> comment <em>/<code class="language-text">in place for the minifier to not prune it out. Also, a LESS style comment</code>//` is not sufficient, since those are pruned out at compile-time.</em></p>\n<p>In the above example, we define our base component class <code class="language-text">.button</code>, then set up child element classes: <code class="language-text">.bg</code> and <code class="language-text">.icon</code>, we also add state classes: <code class="language-text">.selected</code>, <code class="language-text">large</code>, and <code class="language-text">.small</code>. Because this is in our <code class="language-text">ui</code> package, where all of our base components are, we want to establish the common behaviors, but not the appearance, so <code class="language-text">.icon</code>, <code class="language-text">.selected</code>, <code class="language-text">large</code>, and <code class="language-text">.small</code> have no rules on them, just a CSS comment. This way, they will be available to the theme and it can choose how to visually represent those states, and not worry about the logic of <em>how</em> those are applied.</p>\n<h3 id="using-a-ui-component"><a href="#using-a-ui-component" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using a UI Component</h3>\n<p>Let’s look at an example, Moonstone’s <code class="language-text">Button</code>:</p>\n<div class="gatsby-highlight" data-language="jsx">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> kind <span class="token keyword">from</span> <span class="token string">\'@enact/core/kind\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> UiButton <span class="token keyword">from</span> <span class="token string">\'@enact/ui/Button\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> componentCss <span class="token keyword">from</span> <span class="token string">\'./Button.module.less\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">\'CustomizedButton\'</span><span class="token punctuation">,</span>\n\n\tstyles<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tcss<span class="token operator">:</span> componentCss<span class="token punctuation">,</span>\n\t\tclassName<span class="token operator">:</span> <span class="token string">\'button\'</span><span class="token punctuation">,</span>\n\t\tpublicClassNames<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'button\'</span><span class="token punctuation">,</span> <span class="token string">\'bg\'</span><span class="token punctuation">,</span> <span class="token string">\'large\'</span><span class="token punctuation">,</span> <span class="token string">\'selected\'</span><span class="token punctuation">,</span> <span class="token string">\'small\'</span><span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\t<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>children<span class="token punctuation">,</span> css<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UiButton</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">rest</span><span class="token punctuation">}</span></span> <span class="token attr-name">css</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>css<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">UiButton</span></span><span class="token punctuation">></span></span>\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Button<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>In this example, we’ve imported the unstyled <code class="language-text">ui/Button</code>, which exports all available classes for customization (by setting <code class="language-text">publicClassNames: true</code>), and we’ve imported our LESS file where we have many styles defined for the available states that a button can be in: large, small, selected, pressed, disabled, etc. We also have access to the internal element classes: bg, client, and marquee. Each of these classes match one of the public class names made available by the <code class="language-text">ui/Button</code> component. So what can we do with this? We, as the component authors, have access to all of the class names which were made available in the components we’re using, however, we can choose to restrict the available classes being made available to our consumers. In the above example we’ve only chosen to export four (4) classes for customization. It is the theme’s discretion to determine how customizable or rigid it should be. Moonstone, for example, is relatively rigid so it maintains consistency for its visual identity. Our <code class="language-text">ui</code> package, on the other hand, is <em>completely</em> open to customization and expresses only minimal initial styling. It makes prolific use of <code class="language-text">publicClassNames: true</code>, which is shorthand for allowing <em>all</em> classes to be customized.</p>\n<h3 id="adding-state-classes"><a href="#adding-state-classes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Adding State Classes</h3>\n<p>Moonstone also adds its own props, which are specific to Moonstone; things like the <code class="language-text">backgroundOpacity</code> prop and the <code class="language-text">color</code> prop. They are added to the example above via the <code class="language-text">computed</code> block:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t<span class="token function-variable function">className</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>backgroundOpacity<span class="token punctuation">,</span> color<span class="token punctuation">,</span> styler<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> styler<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>\n\t\tbackgroundOpacity<span class="token punctuation">,</span>\n\t\tcolor\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p>These props are sent to our <code class="language-text">styler.append</code> feature, which in this case, takes the value of these prop variables and applies them directly as class names. Setting <code class="language-text">&lt;Button color=&quot;red&quot;&gt;</code> appends the <code class="language-text">.red</code> class to the component. If you were wanting a Boolean state class, something like the following would do the job:</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript">computed<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t<span class="token function-variable function">className</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>backgroundOpacity<span class="token punctuation">,</span> color<span class="token punctuation">,</span> ready<span class="token punctuation">,</span> styler<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> styler<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>\n\t\tbackgroundOpacity<span class="token punctuation">,</span>\n\t\tcolor<span class="token punctuation">,</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\tready\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p>This would apply the <code class="language-text">.ready</code> class, only if the <code class="language-text">ready</code> prop was truthy, like so:  <code class="language-text">&lt;Button color=&quot;red&quot; ready&gt;</code> and not in this this case:  <code class="language-text">&lt;Button color=&quot;red&quot;&gt;</code>.</p>\n<h3 id="how-it-works"><a href="#how-it-works" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How It Works</h3>\n<p>When creating customizable components it may be helpful to understand how the theming system passes information between layers and how the internals work.</p>\n<h4 id="importing"><a href="#importing" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Importing</h4>\n<p>When a LESS or CSS file is imported, the classes are inventoried and a hash map is generated of original class names to obfuscated modularized class names: <code class="language-text">{original: obfuscated}</code>. Your module now has a map of all of the class names you referenced. Normally, when using <code class="language-text">kind()</code> you simply pass this into the <code class="language-text">styles</code> block, and indicate which one is your base class, with the <code class="language-text">className</code> key.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> css <span class="token keyword">from</span> <span class="token string">\'./Button.module.less\'</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n<span class="token punctuation">{</span>\n\tcss<span class="token punctuation">,</span>\t<span class="token comment">// Via ES6, the `css` variable is converted to {\'css\': css}</span>\n\tclassName<span class="token operator">:</span> <span class="token string">\'button\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token operator">...</span></code></pre>\n      </div>\n<p>Here, <code class="language-text">kind()</code> handles the mapping from the <code class="language-text">css</code> hash to your <code class="language-text">&#39;button&#39;</code> class name. A similar process happens when you include the <code class="language-text">publicClassNames</code> key and array in this block. The names of your classes are mapped to the previously published class names, and they are paired up.</p>\n<p>For example, <code class="language-text">Button</code> publishes the <code class="language-text">.bg</code> class from <code class="language-text">ui</code>. Moonstone adds its own styling rules to the existing <code class="language-text">.bg</code> class simply by giving its custom rules the same name as <code class="language-text">ui</code>. Internally, Enact is attaching both the <code class="language-text">ui</code> and <code class="language-text">moonstone</code> classes together for the <code class="language-text">.bg</code> original class name key, like: <code class="language-text">{bg: &#39;ui_Button_bg moonstone_Button_bg&#39;}</code>. Excluding a class name from the <code class="language-text">publicClassNames</code> array will ignore that class when they’re appended to the map.</p>\n<h3 id="the-code-classlanguage-textcsscode-prop"><a href="#the-code-classlanguage-textcsscode-prop" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code class="language-text">css</code> prop</h3>\n<p>You can access the full collection of mapped class names via the automatically added <code class="language-text">css</code> prop. The <code class="language-text">css</code> prop doesn’t behave like normal props, though. It does not automatically pass down to deeper layers, via props-spreading. This is because we wanted to be conscious of when we are passing classes down to another layer. When you add a <code class="language-text">publicClassNames</code> key to your component, it will automatically receive the <code class="language-text">css</code> prop in its collection of props, which can be used in the <code class="language-text">render</code> or <code class="language-text">computed</code> functions just like any other prop. To reference an earlier example, when <code class="language-text">moonstone/Button</code> encounters the <code class="language-text">css</code> prop, it is an object like this:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n\tbutton<span class="token operator">:</span> <span class="token string">\'ui_Button_button moonstone_Button_button\'</span><span class="token punctuation">,</span>\n\tbg<span class="token operator">:</span> <span class="token string">\'ui_Button_bg moonstone_Button_bg\'</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p> You then simply use this object to refer to your internal elements, like this:</p>\n<div class="gatsby-highlight" data-language="jsx">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>children<span class="token punctuation">,</span> css<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">rest</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>css<span class="token punctuation">.</span>bg<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\t\t<span class="token punctuation">{</span>children<span class="token punctuation">}</span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Conveniently, the base class name is applied automatically to the <code class="language-text">className</code> prop, which is passed through the <code class="language-text">rest</code> spread above. This is also true for the <code class="language-text">backgroundOpacity</code> and <code class="language-text">color</code> prop classes applied during the computed <code class="language-text">className</code> function.</p>\n<h4 id="combining-all-the-bits"><a href="#combining-all-the-bits" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Combining all the bits</h4>\n<p>Let’s look at our combined example again.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> kind <span class="token keyword">from</span> <span class="token string">\'@enact/core/kind\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> UiButton <span class="token keyword">from</span> <span class="token string">\'@enact/ui/Button\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> componentCss <span class="token keyword">from</span> <span class="token string">\'./Button.module.less\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">\'CustomizedButton\'</span><span class="token punctuation">,</span>\n\n\tstyles<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tcss<span class="token operator">:</span> componentCss<span class="token punctuation">,</span>\n\t\tclassName<span class="token operator">:</span> <span class="token string">\'button\'</span><span class="token punctuation">,</span>\n\t\tpublicClassNames<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'button\'</span><span class="token punctuation">,</span> <span class="token string">\'bg\'</span><span class="token punctuation">,</span> <span class="token string">\'large\'</span><span class="token punctuation">,</span> <span class="token string">\'selected\'</span><span class="token punctuation">,</span> <span class="token string">\'small\'</span><span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\t<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>children<span class="token punctuation">,</span> css<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t\t<span class="token operator">&lt;</span>UiButton <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> css<span class="token operator">=</span><span class="token punctuation">{</span>css<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>UiButton<span class="token operator">></span>\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Button<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>We’re importing our CSS with a non-conflicting name (<code class="language-text">componentCss</code>); sending it into <code class="language-text">kind()</code>; setting our base class name, which we could have named differently than our <code class="language-text">ui</code> component base class name; adding some classes to be published; then extracting the automatically added <code class="language-text">css</code> prop down in <code class="language-text">render</code>; and finally, forwarding it to the <code class="language-text">UiButton</code> component, which publishes all of its class names for customization. And there we have a fully styled, customized Button.</p>\n<h2 id="theme-creation-concepts"><a href="#theme-creation-concepts" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Theme Creation Concepts</h2>\n<p>So, you’re fully versed in the theming system and you’re ready to make your own themed set of components, or want to create a new base component that can be themed. Let’s cover some concepts that will make your project easier to maintain.</p>\n<h3 id="visually-divorced"><a href="#visually-divorced" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Visually Divorced</h3>\n<p>All of the Enact components follow a naming strategy that we call “visually divorced”. This is the concept of naming all APIs, classes, and components with words that do not relate to visual concepts, but rather to semantic concepts. This way, when a theme chooses to visually represent something, like a state or a prop that we added to a component, it can fully decide how that looks, and not be dependent on how we’ve named something. As a contrived example, think about it like the shift in HTML from using <code class="language-text">&lt;b&gt;</code> bold and <code class="language-text">&lt;i&gt;</code> italic tags to <code class="language-text">&lt;strong&gt;</code> and <code class="language-text">&lt;em&gt;</code> tags. The former describe how the components visually appear, while the latter describe what the meaning of those is, which just <em>happen</em> to be represented by bold text and italic text by the browser. A web developer could choose to represent those concepts differently on their site, for visually impaired users, or for languages or fonts that are unable to represent a bold or italic font style.</p>\n<h3 id="states"><a href="#states" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>States</h3>\n<p>Typically, we’ll represent the state of a component using a class. The presence of the class means “on” and the absence of it means “off”. This works really well for boolean properties, but can also be used to represent enumerated properties. The <code class="language-text">orientation</code> prop is a good example of this. A Slider can choose an orientation, which applies one of the allowed values as a class. <code class="language-text">moonstone/Slider</code> currently supports <code class="language-text">orientation=&quot;horizontal&quot;</code> and <code class="language-text">orientation=&quot;vertical&quot;</code>. These values are applied literally to the component as classes <code class="language-text">.horizontal</code> and <code class="language-text">.vertical</code>. That being said, there’s no reason why new orientations like “radial” or “2d” couldn’t be implemented, which we can then fully style using CSS however we want; maybe “radial” describes a speedometer-like dial and “2d” describes a graph-like square. <code class="language-text">Slider</code> imposes no expectations on how the values it manages are used, it just makes them available. The visual designer is then able to use this available information to design, restriction-free, how ever is most appropriate for their theme.</p>\n<p>Something like the following is easy to read, understand, maintain, and extend:</p>\n<div class="gatsby-highlight" data-language="css">\n      <pre class="language-css"><code class="language-css"><span class="token selector">.slider</span> <span class="token punctuation">{</span>\n\t<span class="token selector">&amp;.horizontal</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">max-width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>\n\t\t<span class="token property">height</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token selector">&amp;.vertical</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">max-height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>\n\t\t<span class="token property">width</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token selector">&amp;.radial</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n\t\t<span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n\t\t<span class="token property">border-radius</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Meanwhile, thanks to <code class="language-text">kind()</code>, the code to implement multiple formats is as simple as the following:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> Slider <span class="token operator">=</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">\'Slider\'</span><span class="token punctuation">,</span>\n\n\tpropTypes<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\torientation<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">oneOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'horizontal\'</span><span class="token punctuation">,</span> <span class="token string">\'vertical\'</span><span class="token punctuation">,</span> <span class="token string">\'radial\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\tdefaultProps<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\torientation<span class="token operator">:</span> <span class="token string">\'horizontal\'</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\tcomputed<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token function-variable function">className</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>orientation<span class="token punctuation">,</span> styler<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> styler<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>orientation<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n<span class="token operator">...</span></code></pre>\n      </div>\n<h3 id="base-components"><a href="#base-components" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Base Components</h3>\n<p>A compelling base component, one that is usable by multiple themes, will do its best to impose as few visual rules as is possible while offering hooking-points for creative visual designers to do interesting things with. You’ll want to balance what is minimally required to make the component functional, with visuals. Style rules that may be useful for functionality are things like <code class="language-text">display</code> type: inline, inline-block, block, flex, etc, or <code class="language-text">position</code> on a child element that allow it to fit to the arbitrary shape of its parent.</p>\n<h3 id="component-overrides"><a href="#component-overrides" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Component Overrides</h3>\n<p>Conventionally, the base element is overridable using the prop <code class="language-text">component</code>, and others via prefixing that word, e.g. <code class="language-text">iconComponent</code>, <code class="language-text">buttonComponent</code>, <code class="language-text">marqueeComponent</code>. This gives the theme the ability to provide its own customized drop-in component. You can assign the default in the <code class="language-text">defaultProps</code> config. It’s also great practice to use some low-overhead basic DOM element for the default too, to reduce loading cost, something like <code class="language-text">&#39;div&#39;</code>, <code class="language-text">&#39;span&#39;</code>, <code class="language-text">&#39;img&#39;</code>, or even <code class="language-text">&#39;section&#39;</code>.</p>\n<p>Enact includes a great feature for merging author and consumer props onto one component to make this process much simpler. Below is an example of how <code class="language-text">ui/IconButton</code> is composed:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> ComponentOverride <span class="token keyword">from</span> <span class="token string">\'@enact/ui/ComponentOverride\'</span><span class="token punctuation">;</span>\n\n<span class="token operator">...</span>\n\tdefaultProps<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tbuttonComponent<span class="token operator">:</span> <span class="token string">\'div\'</span><span class="token punctuation">,</span>\n\t\ticonComponent<span class="token operator">:</span> <span class="token string">\'span\'</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token operator">...</span>\n\t<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>buttonComponent<span class="token punctuation">,</span> children<span class="token punctuation">,</span> css<span class="token punctuation">,</span> icon<span class="token punctuation">,</span> iconComponent<span class="token operator">:</span> Icon<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t\t<span class="token operator">&lt;</span>ComponentOverride\n\t\t\t<span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>\n\t\t\tcomponent<span class="token operator">=</span><span class="token punctuation">{</span>buttonComponent<span class="token punctuation">}</span>\n\t\t\tsize<span class="token operator">=</span><span class="token punctuation">{</span>size<span class="token punctuation">}</span>\n\t\t\tminWidth<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>\n\t\t<span class="token operator">></span>\n\t\t\t<span class="token operator">&lt;</span>Icon size<span class="token operator">=</span><span class="token punctuation">{</span>size<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token punctuation">{</span>css<span class="token punctuation">.</span>icon<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>icon<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Icon<span class="token operator">></span>\n\t\t\t<span class="token punctuation">{</span>children<span class="token punctuation">}</span>\n\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>ComponentOverride<span class="token operator">></span>\n\t<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>The remainder of the props are spread onto the <code class="language-text">buttonComponent</code> while the <code class="language-text">size</code> and <code class="language-text">minWidth</code> props are added directly. <em>(<code class="language-text">size</code> could have been passed via <code class="language-text">rest</code> but it is also sent to <code class="language-text">Icon</code>, and we chose this approach to improve readability, rather than sending <code class="language-text">size={rest.size}</code>.)</em></p>\n<h3 id="best-practices"><a href="#best-practices" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Best practices</h3>\n<h4 id="should"><a href="#should" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Should</h4>\n<p>Recommendations for components:</p>\n<ul>\n<li>Establish the complete HTML DOM structure necessary for operation, with the minimum styling needed.</li>\n<li>Declare and export all state-classes via <code class="language-text">publicClassNames: true</code>.</li>\n<li>Allow component and possibly sub-component (child component) overrides where reasonable.</li>\n</ul>\n<h4 id="should-not"><a href="#should-not" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Should Not</h4>\n<p>Generally avoid doing these for components:</p>\n<ul>\n<li>Include HOCs (higher-order components), not allowing the theme to compose and decorate its own features, unless they are always necessary for function.</li>\n<li>Define colors, measurements (that aren’t critical for functionality), margins/paddings, or other purely visual aspects of the component’s styles.</li>\n</ul>',
frontmatter:{title:"Theming",github:"https://github.com/enactjs/enact/blob/develop/docs/theming.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/developer-guide/accessibility/"},frontmatter:{title:"Accessibility Support in Enact"}}},{node:{fields:{slug:"/docs/developer-guide/resources/"},frontmatter:{title:"Additional Developer Resources"}}},{node:{fields:{slug:"/docs/developer-guide/contributing/"},frontmatter:{title:"Contribution Guide"}}},{node:{fields:{slug:"/docs/developer-guide/creating-components/"},frontmatter:{title:"Creating Components the Enact Way"}}},{node:{fields:{slug:"/docs/developer-guide/best-practices/"},frontmatter:{title:"Enact Best Practices"}}},{node:{fields:{slug:"/docs/developer-guide/performance/"},frontmatter:{title:"Enact Performance Guide"}}},{node:{fields:{slug:"/docs/developer-guide/glossary/"},frontmatter:{title:"Glossary"}}},{node:{fields:{slug:"/docs/developer-guide/migration/"},frontmatter:{title:"Migration Guides"}}},{node:{fields:{slug:"/docs/developer-guide/redux/"},frontmatter:{title:"Redux"}}},{node:{fields:{slug:"/docs/developer-guide/spotlight/"},frontmatter:{title:"Spotlight"}}},{node:{fields:{slug:"/docs/developer-guide/testing-components/"},frontmatter:{title:"Testing Your Components"}}},{node:{fields:{slug:"/docs/developer-guide/theming/"},frontmatter:{title:"Theming"}}},{node:{fields:{slug:"/docs/developer-guide/interoperability/"},frontmatter:{title:"Using Enact with Third-party Libraries"}}},{node:{fields:{slug:"/docs/developer-guide/why-use-kind/"},frontmatter:{title:"Why Use kind()?"}}},{node:{fields:{slug:"/docs/developer-guide/i18n/"},frontmatter:{title:"i18n (Internationalization)"}}},{node:{fields:{slug:"/docs/developer-guide/webos/"},frontmatter:{title:"webOS Support Module"}}}]},site:{siteMetadata:{title:"I18N & L10N"}},docsPages:{edges:[{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Internationalization"}}},{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/modules/index.js",frontmatter:{title:"Getting Started"}}}]}},pathContext:{slug:"/docs/developer-guide/theming/",title:"Theming",parentRegex:"/\\/docs\\/developer-guide(\\/[^/]*)?\\/$/"}}}});