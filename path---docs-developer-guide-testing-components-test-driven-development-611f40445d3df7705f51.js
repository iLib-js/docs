webpackJsonp([0x7ce08537bdd2],{964:function(n,t){n.exports={data:{markdownRemark:{html:'<nav role="navigation" class="page-toc">\n<ul>\n<li><a href="#before-getting-started">Before Getting Started</a></li>\n<li><a href="#overview">Overview</a></li>\n<li><a href="#introduction-to-tdd">Introduction to TDD</a></li>\n<li><a href="#sample-tdd-scenario">Sample TDD Scenario</a></li>\n<li><a href="#test-method-introduction">Test Method Introduction</a></li>\n</ul>\n</nav>\n<h2 id="before-getting-started"><a href="#before-getting-started" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Before Getting Started</h2>\n<p>Please refer to our document <a href="../unit-testing/">Unit Testing</a>, it gives\nthe basic information on what unit testing is and how to start unit testing.</p>\n<h2 id="overview"><a href="#overview" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>\n<p>This document describes the test-first methodology we aspire to on the Enact team.  The concept behind Test Driven\nDevelopment (TDD) is that you write tests before you begin implementation.  The theory is that testing helps you think\nthrough the problem and serves as a sort of design for the forthcoming code.  Additionally, the tests serve as a validation\nthat refactoring has not broken the code.</p>\n<h2 id="introduction-to-tdd"><a href="#introduction-to-tdd" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction to TDD</h2>\n<p>TDD is one of the Agile programing tools. As described above, it involves writing tests (which fail) and then writing code\nthat makes those tests pass.  These tests are unit tests and seek to test individual bits of functionality.  Such tests\nusually describe the functionality of the component being created. For a good overview of TDD that balances exigence and\nan understanding of how it impacts the development process, check out <a href="http://jrsinclair.com/articles/2016/one-weird-trick-that-will-change-the-way-you-code-forever-javascript-tdd/">this gentle introduction</a>.</p>\n<h2 id="sample-tdd-scenario"><a href="#sample-tdd-scenario" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sample TDD Scenario</h2>\n<p>Imagine we’re going to create the <code class="language-text">@enact/moonstone/IconButton</code> component and that the only requirements we have so far\nare that it will have a <code class="language-text">&lt;Button&gt;</code> containing an <code class="language-text">&lt;Icon&gt;</code> as its children and that all properties assigned to the IconButton\nshould be applied to the Button child except <code class="language-text">minWidth</code>, which should always be <code class="language-text">false</code>.</p>\n<p>In this scenario, we would create an empty IconButton component that has no functionality.  Then, we might write a test to\nverify that an IconButton with <code class="language-text">minWidth={true}</code> does not change the child component’s property.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'IconButton Specs\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\n\t<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'should always maintain minWidth=false for its &lt;Button> child\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> iconButton <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>\n\t\t\t<span class="token operator">&lt;</span>IconButton minWidth<span class="token operator">></span>star<span class="token operator">&lt;</span><span class="token operator">/</span>IconButton<span class="token operator">></span>\n\t\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> button <span class="token operator">=</span> iconButton<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'Button\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> expected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> actual <span class="token operator">=</span> <span class="token punctuation">(</span>button<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">\'minWidth\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t\t<span class="token function">expect</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>If we execute the test at this point it will fail.  We have not implemented any functionality in our IconButton so we\nshould expect this will fail.  TDD suggests we should write the minimal amount of code that will allow this test to pass.\nSo, we might write the following code in <code class="language-text">IconButton.js</code>:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">IconButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t<span class="token operator">&lt;</span>Button minWidth<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token operator">></span>\n\t\t\t<span class="token operator">&lt;</span>Icon<span class="token operator">></span>star<span class="token operator">&lt;</span><span class="token operator">/</span>Icon<span class="token operator">></span>\n\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>\n\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This will make the test pass, but it’s not a very useful IconButton.  Let’s add a test to check the requirement that other\nproperties are applied to the Button child.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'should apply same prop to &lt;Button> child\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> iconButton <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>\n\t\t<span class="token operator">&lt;</span>IconButton size<span class="token operator">=</span><span class="token string">"small"</span><span class="token operator">></span>star<span class="token operator">&lt;</span><span class="token operator">/</span>IconButton<span class="token operator">></span>\n\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> button <span class="token operator">=</span> iconButton<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'Button\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> expected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> actual <span class="token operator">=</span> button<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">\'small\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">expect</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>When we run this test, it will fail.  Now, we can wire up the property correctly and verify our component works.  We can\nthen add a test for each new piece of functionality and then write the corresponding code to allow the test to pass.</p>\n<p>While this process may seem a little naive, it does allow us to focus on writing the minimal amount of code that will solve\nthe problem at hand.  It serves as a reminder of the YAGNI principle: You Ain’t Gonna Need It.  Don’t overengineer the\nsolution.</p>\n<h2 id="test-method-introduction"><a href="#test-method-introduction" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Test Method Introduction</h2>\n<p>We use <code class="language-text">Jest</code> for our unit testing. While there are quite a few comparisons it can help to stick to <code class="language-text">.toBe()</code> and <code class="language-text">.not.toBe()</code>.  These methods come after\nthe <code class="language-text">expect()</code> call.</p>\n<p>We use Enzyme to render our components for testing. Enzyme can render a component in one of three different ways.  Each\nhas its benefits and drawbacks.  A summary of the methods follows.</p>\n<h3 id="shallow-rendering---code-classlanguage-textshallowcode"><a href="#shallow-rendering---code-classlanguage-textshallowcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Shallow Rendering - <code class="language-text">shallow()</code></h3>\n<p><a href="https://github.com/airbnb/enzyme/blob/master/docs/api/shallow.md">Shallow</a> rendering renders the component specified but does not render any of its children.  This can be useful when you\nonly want to test the output of the single object.  If you need to be able to test that properties get passed to children,\nthen you will need to use Mount rendering.  Once a component is rendered a number of methods are available to inspect the\noutput.  These include:</p>\n<ul>\n<li><code class="language-text">find()</code> - Returns nodes that match the passed-in selector.  For custom components, usually you can use the name of the control</li>\n<li><code class="language-text">contains()</code> - Returns true if a node or array of nodes exist in the render</li>\n<li><code class="language-text">hasClass()</code> - Returns true if the component has the specified className</li>\n<li><code class="language-text">children()</code> - Returns the children of the component, wrapped so that these methods can be applied. (Note: In shallow render, the children will not be complete)</li>\n<li><code class="language-text">props()</code> - Returns the props of the component</li>\n<li><code class="language-text">prop()</code> - Returns the value of the specified prop</li>\n<li><code class="language-text">simulate()</code> - Simulates an event</li>\n<li><code class="language-text">instance()</code> - Returns the instance of the root component</li>\n<li><code class="language-text">setState()</code> - Sets the state of the component to the passed-in state</li>\n<li><code class="language-text">setProps()</code> - Manually sets the props of the component</li>\n</ul>\n<h3 id="full-rendering---code-classlanguage-textmountcode"><a href="#full-rendering---code-classlanguage-textmountcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Full Rendering - <code class="language-text">mount()</code></h3>\n<p>Full rendering or <a href="https://github.com/airbnb/enzyme/blob/master/docs/api/mount.md">mount</a> renders the component specified as well as all children.  This can be useful when you need to be able to\ntest that properties get passed to children. Mount rendering uses the same methods as Shallow rendering listed above.</p>\n<h3 id="static-rendering---code-classlanguage-textrendercode"><a href="#static-rendering---code-classlanguage-textrendercode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Static Rendering - <code class="language-text">render()</code></h3>\n<p>Static rendering or <a href="https://github.com/airbnb/enzyme/blob/master/docs/api/render.md">render</a>, generates the HTML output from the specified component.  Static rendering has several utility methods including:</p>\n<ul>\n<li><code class="language-text">text()</code> - Returns the text of the selected node</li>\n<li><code class="language-text">html()</code> - Returns the raw HTML of the selected node</li>\n<li><code class="language-text">children()</code> - Returns the children of the selected node</li>\n<li><code class="language-text">find()</code> - searches the node for the passed-in selector</li>\n</ul>',frontmatter:{title:"Test Driven Development(TDD)",github:"https://github.com/enactjs/enact/blob/develop/docs/testing-components/test-driven-development/index.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/developer-guide/testing-components/test-driven-development/"},frontmatter:{title:"Test Driven Development(TDD)"}}},{node:{fields:{slug:"/docs/developer-guide/testing-components/"},frontmatter:{title:"Testing Your Components"}}},{node:{fields:{slug:"/docs/developer-guide/testing-components/unit-testing/"},frontmatter:{title:"Unit Testing"}}}]},site:{siteMetadata:{title:"Enact"}},docsPages:{edges:[{node:{path:"/docs/developer-guide/",context:{title:null}}},{node:{path:"/docs/developer-tools/",context:{title:null}}},{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/developer-guide/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/developer-guide/index.js",frontmatter:{title:"Developer Guide"}}},{node:{fields:{slug:"/docs/developer-tools/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/developer-tools/index.js",frontmatter:{title:"Developer Tools"}}},{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/modules/index.js",frontmatter:{title:"API Libraries"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Tutorials"}}}]}},pathContext:{slug:"/docs/developer-guide/testing-components/test-driven-development/",title:"Test Driven Development(TDD)",parentRegex:"/\\/docs\\/developer-guide\\/testing-components(\\/[^/]*)?\\/$/"}}}});