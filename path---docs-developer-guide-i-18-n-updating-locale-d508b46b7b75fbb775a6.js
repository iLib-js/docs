webpackJsonp([39348132383533],{947:function(n,a){n.exports={data:{markdownRemark:{html:'<nav role="navigation" class="page-toc">\n<ul>\n<li><a href="#using-context">Using context</a></li>\n<li><a href="#updating-locale-via-props">Updating locale via props</a></li>\n</ul>\n</nav>\n<p>Locale may be explicitly set by setting <code class="language-text">props</code> on the decorator or by calling the <code class="language-text">updateLocale</code> function via <a href="https://reactjs.org/docs/context.html">context</a>. Apps should use only one of these methods to set locale or conflicts could arise (for example, if a re-render of the root component caused the locale to be reset).</p>\n<h2 id="using-context"><a href="#using-context" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using context</h2>\n<p>Context is the easiest way to update the locale. Call the <code class="language-text">updateLocale</code> function, passing the locale string (e.g. <code class="language-text">context.updateLocale(&#39;en-US&#39;)</code>:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>I18nContextDecorator<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@enact/i18n/I18nDecorator\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> SomeComponent <span class="token operator">=</span> <span class="token function">I18nContextDecorator</span><span class="token punctuation">(</span>\n\t<span class="token punctuation">{</span>updateLocaleProp<span class="token operator">:</span> <span class="token string">\'updateLocale\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>\n\t\t<span class="token operator">...</span>\n\t\t<span class="token function-variable function">changeLocale</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">locale</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">updateLocale</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token operator">...</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="updating-locale-via-props"><a href="#updating-locale-via-props" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Updating locale via props</h2>\n<p>The other way to update locale is to send a prop down through the decorator (directly or through <code class="language-text">moonstone/MoonstoneDecorator</code>).</p>\n<p>A typical app looks like this:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">//Typically inside app.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">MoonstoneDecorator</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//Typically inside index.js</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App\'</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// or if you\'re using redux</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n\t<span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>\n\t\t<span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>\n\t<span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">,</span>\n\tdocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The <code class="language-text">&lt;App /&gt;</code> component in <code class="language-text">index.js</code> can receive props. The decorator accepts a <code class="language-text">locale</code> prop, which accepts the desired locale string.</p>\n<p>An example usage may look like this:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">AppWrapped</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t<span class="token operator">&lt;</span>App locale<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>locale<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>\n<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>In a deeply nested app, passing <code class="language-text">props</code> back to the root element can get messy. State management libraries such as Redux can assist with this.</p>\n<p>Using <code class="language-text">redux</code>, a connected component can be used as shown below:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Inside app.js</span>\n<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t<span class="token punctuation">{</span>\n\t\tlocale<span class="token operator">:</span> state<span class="token punctuation">.</span>locale\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">MoonstoneDecorator</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This would allow you to control locale information through Redux. However, there are some issues with this approach, explained below.</p>\n<h3 id="issue-with-context-and-redux"><a href="#issue-with-context-and-redux" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Issue with context and Redux</h3>\n<p>Using <code class="language-text">context</code> and Redux together has one major problem. When relying on using the <code class="language-text">rtl</code> property from <code class="language-text">context</code> to update a component, the <code class="language-text">react-redux</code> <code class="language-text">connect</code> method will suppress updates caused by context changes.</p>\n<p>The reason is that <code class="language-text">connect</code> only checks to see if <code class="language-text">props</code> have changed, not <code class="language-text">context</code>. If you only update <code class="language-text">context</code> then the component will not re-render. To circumvent this you must use <code class="language-text">connect</code> with the option <code class="language-text">pure</code> set to <code class="language-text">false</code> like this:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>pure<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>LocaleSwitch<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This will allow the <code class="language-text">context</code> to flow through to the component, but it will also cause performance issues because your component will be re-rendering on every change. If you must use <code class="language-text">context</code> with <code class="language-text">react-redux</code>, please make the component as small as possible to reduce re-renders or use <code class="language-text">shouldComponentUpdate</code>.</p>',frontmatter:{title:"Updating Locale",github:"https://github.com/enactjs/enact/blob/develop/packages/i18n/docs/updating-locale.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/developer-guide/i18n/updating-locale/"},frontmatter:{title:"Updating Locale"}}},{node:{fields:{slug:"/docs/developer-guide/i18n/"},frontmatter:{title:"i18n (Internationalization)"}}},{node:{fields:{slug:"/docs/developer-guide/i18n/ilib/"},frontmatter:{title:"iLib"}}}]},site:{siteMetadata:{title:"Enact"}},docsPages:{edges:[{node:{path:"/docs/developer-guide/",context:{title:null}}},{node:{path:"/docs/developer-tools/",context:{title:null}}},{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/developer-guide/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/developer-guide/index.js",frontmatter:{title:"Developer Guide"}}},{node:{fields:{slug:"/docs/developer-tools/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/developer-tools/index.js",frontmatter:{title:"Developer Tools"}}},{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/modules/index.js",frontmatter:{title:"API Libraries"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Tutorials"}}}]}},pathContext:{slug:"/docs/developer-guide/i18n/updating-locale/",title:"Updating Locale",parentRegex:"/\\/docs\\/developer-guide\\/i18n(\\/[^/]*)?\\/$/"}}}});