webpackJsonp([99823592264776],{946:function(n,a){n.exports={data:{markdownRemark:{html:'<nav role="navigation" class="page-toc">\n<ul>\n<li><a href="#accessing-ilib-from-enact">Accessing iLib from Enact</a></li>\n<li><a href="#translating-strings">Translating Strings</a></li>\n<li><a href="#using-ilib-for-formatting">Using iLib for formatting</a></li>\n</ul>\n</nav>\n<p>Our <code class="language-text">i18n</code> library relies on the wonderful <a href="https://github.com/iLib-js/iLib">iLib</a> library. It provides many useful tools for things like string translation, date/time formatting, number parsing, etc.</p>\n<p>You must install <a href="https://www.npmjs.com/package/ilib"><code class="language-text">iLib</code></a> as a dependency in your application to use the <code class="language-text">i18n</code> module:</p>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> ilib@^14.2.0</code></pre>\n      </div>\n<p>We will cover a good deal of how to use <code class="language-text">iLib</code> inside your <code class="language-text">Enact</code> app below, but we will not cover everything.</p>\n<p>If you wish to learn more about <code class="language-text">ilib</code> checkout their <a href="https://github.com/iLib-js/iLib">github</a> and <a href="https://github.com/iLib-js/iLib/blob/master/doc/index.md">docs</a>.</p>\n<h2 id="accessing-ilib-from-enact"><a href="#accessing-ilib-from-enact" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Accessing iLib from Enact</h2>\n<p>You can use iLib like this:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> DateFmt <span class="token keyword">from</span> <span class="token string">\'ilib/lib/DateFmt\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> formatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateFmt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tdate<span class="token operator">:</span> <span class="token string">\'dmwy\'</span><span class="token punctuation">,</span>\n\tlength<span class="token operator">:</span> <span class="token string">\'full\'</span><span class="token punctuation">,</span>\n\ttimezone<span class="token operator">:</span> <span class="token string">\'local\'</span><span class="token punctuation">,</span>\n\tuseNative<span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="translating-strings"><a href="#translating-strings" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Translating Strings</h2>\n<h3 id="resbundle"><a href="#resbundle" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ResBundle</h3>\n<p><code class="language-text">ilib/ResBundle</code>, the resource bundle class, represents a set of translated\nstrings.  Each app has its own resource bundle.  These bundles are loaded\ndynamically, with each one having a name and locale.</p>\n<p>The locale may be specified as an option in the constructor.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">import</span> ResBundle <span class="token keyword">from</span> <span class="token string">\'ilib/lib/ResBundle\'</span><span class="token punctuation">;</span>\n\t<span class="token operator">...</span>\n\t<span class="token keyword">const</span> rb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResBundle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>locale<span class="token operator">:</span> <span class="token string">"ko-KR"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>In practical terms, <code class="language-text">ResBundle</code>’s most important method is <code class="language-text">getString()</code>.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token function">toIString</span><span class="token punctuation">(</span><span class="token string">"My Label"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The actual data contained in the bundle is stored under the application’s\n<code class="language-text">resources</code> directory. Within <code class="language-text">resources</code> is a hierarchy of subdirectories\nnamed for locales. <code class="language-text">iLib</code> reads translated strings from <code class="language-text">strings.json</code> files\nfound in these directories.</p>\n<p>In the layered structure of the locale directories, values from deeper levels\noverride those from nearer the surface, as in the following example:</p>\n<div class="gatsby-highlight" data-language="none">\n      <pre class="language-none"><code class="language-none">resources/\n\ten/\n\t\tstrings.json - shared strings for all English\n\t\tappinfo.json - application description\n\t\tCA/\n\t\t\tstrings.json - only strings special to Canada\n\t\tGB/\n\t\t\tstrings.json - only strings special to Great Britain</code></pre>\n      </div>\n<p>For the <code class="language-text">en-GB</code> locale, if a string value is defined in both\n<code class="language-text">/resources/en/strings.json</code> and <code class="language-text">/resources/en/GB/strings.json</code>, the value from\nthe latter (more-specific) file will override the value from the former file.</p>\n<p>It’s worth noting that, in addition to strings, other localized files (such as\n<code class="language-text">appinfo.json</code>) may also be placed in these hierarchical directories, with their\ndata following the same rules of precedence.  In the case of <code class="language-text">appinfo.json</code>, the\nlocale-specific files will typically include values for “title”, “keywords”, and\n“description”.  The other properties will keep the values inherited from the\napp’s top-level <code class="language-text">appinfo.json</code>.</p>\n<p><code class="language-text">$L()</code> is a convience method for <code class="language-text">ResBundle</code>, it is described in the main section of the <code class="language-text">i18n</code> docs <a href="../">here</a></p>\n<h2 id="using-ilib-for-formatting"><a href="#using-ilib-for-formatting" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using iLib for formatting</h2>\n<h4 id="string-formatting"><a href="#string-formatting" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>String Formatting</h4>\n<p><code class="language-text">ilib/IString</code> is used to format strings.  You will not generally need to require <code class="language-text">IString</code>\ndirectly to use it. Its <code class="language-text">format()</code> method allows for\ninterpolation of named parameters into the string.  The following syntax is\nrecommended:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">import</span> <span class="token punctuation">{</span>toIString<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'i18n/$L\'</span>\n\n\t<span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token function">toIString</span><span class="token punctuation">(</span><span class="token string">"There are {n} objects."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> str <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>n<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">str</code> now has the value <code class="language-text">&quot;There are 15 objects.&quot;</code></p>\n<p>Note that we are populating <code class="language-text">template</code> by calling <code class="language-text">toIString()</code> on the\nlocalized resource bundle <code class="language-text">$L.rb</code>.  This is because <code class="language-text">format()</code> accepts an\n<code class="language-text">ilib/IString</code> object, but not an intrinsic JavaScript string.  (A call to\n<code class="language-text">toIString()</code> on a resource bundle returns an instance of <code class="language-text">ilib/IString</code>, while\na call to <code class="language-text">$L()</code> returns an intrinsic JavaScript string.)</p>\n<p><code class="language-text">ilib/IString</code> has the same methods as an intrinsic string, and in many cases may\nbe used as a substitute.  For those places that require an intrinsic string, you\nmust call the <code class="language-text">toString()</code> method to convert the <code class="language-text">ilib/IString</code> to an intrinsic\nstring.</p>\n<h4 id="handling-plurals"><a href="#handling-plurals" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Handling Plurals</h4>\n<p><code class="language-text">ilib/IString</code> uses the <code class="language-text">formatChoice()</code> method to handle plurals.  This allows\ntranslators to adjust strings to handle plurals properly for their respective\nlanguages.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token function">toIString</span><span class="token punctuation">(</span> <span class="token string">"0#There are no objects.|1#There is 1 object.|#There are {n} objects."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> str <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">formatChoice</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> <span class="token punctuation">{</span>n<span class="token operator">:</span> number<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">str</code> now has the value <code class="language-text">&quot;There are 3 objects.&quot;</code></p>\n<p><code class="language-text">formatChoice()</code> also supports number classes (“zero”, “one”, “two”, “few” and\n“many”) for languages with complex rules for pluralization, such as Russian or\nSerbian.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token function">toIString</span><span class="token punctuation">(</span> <span class="token string">"0#There are no objects.|few#There are a few ({n}) objects.|#There are many objects. ({n})"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="dates-and-times"><a href="#dates-and-times" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dates and Times</h3>\n<p>The formatting of dates and times can differ widely from one locale to the next:</p>\n<div class="gatsby-highlight" data-language="none">\n      <pre class="language-none"><code class="language-none">------------------------------------\n Locale    Format\n--------- --------------------------\n en-US     Mo 11/12/2012 2:30pm\n\n en-CA     Mo 12/11/2012 2:30 PM\n\n de-DE     14:30 Mo 12.11.2012\n\n zh-CN     2012-11-12周一下午2:30\n\n it-IT     Lu 12/11/2012 14.30\n------------------------------------</code></pre>\n      </div>\n<p>In <code class="language-text">iLib</code>, the <code class="language-text">ilib/DateFmt</code> class is used to format dates and times.  The\nconstructor accepts various options, which control how the formatter behaves.\nOnce you create a <code class="language-text">DateFmt</code> instance, you may call its <code class="language-text">format()</code> method as many\ntimes as you want to format dates according to the given set of options.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">import</span> DateFmt <span class="token keyword">from</span> <span class="token string">\'ilib/lib/DateFmt\'</span><span class="token punctuation">;</span>\n\t<span class="token operator">...</span>\n\t<span class="token keyword">const</span> fmt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateFmt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> d <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Among the options you may specify are the following:</p>\n<ul>\n<li>Which locale to use</li>\n<li>Whether to format the date only, time only, or both date and time together</li>\n<li>Which components of the date or time to format (e.g., only format the month\nand year components of the date)</li>\n<li>Whether to use a 12-hour clock, a 24-hour clock, or the default clock for the\nlocale</li>\n<li>Whether to use short, medium, long, or full-length text for components that\nuse words (e.g., Sunday may be expressed as “S”, “Su”, “Sun”, or “Sunday”)</li>\n<li>Which time zone to format for</li>\n</ul>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">const</span> fmt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateFmt</span><span class="token punctuation">(</span><span class="token punctuation">{</span> locale<span class="token operator">:</span> <span class="token string">"tr-TR"</span><span class="token punctuation">,</span>\n\t\ttype<span class="token operator">:</span> <span class="token string">"date"</span><span class="token punctuation">,</span> date<span class="token operator">:</span> <span class="token string">"dmy"</span><span class="token punctuation">,</span> timezone<span class="token operator">:</span> <span class="token string">"Europe/Istanbul"</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h4 id="calendar-dates"><a href="#calendar-dates" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Calendar Dates</h4>\n<p><code class="language-text">iLib</code> also supports the formatting of dates in multiple calendaring systems,\nwith the default being the familiar Gregorian calendar.</p>\n<p>To create a date, you may call the factory method or use the calendar date\ndirectly, e.g.:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">import</span> HebrewDate <span class="token keyword">from</span> <span class="token string">\'ilib/lib/HebrewDate\'</span><span class="token punctuation">;</span>\n\t<span class="token operator">...</span>\n\t<span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HebrewDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This is equivalent to the following factory method call:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">import</span> dateFactory <span class="token keyword">from</span> <span class="token string">\'ilib/lib/DateFactory\'</span><span class="token punctuation">;</span>\n\t<span class="token operator">...</span>\n\t<span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token function">dateFactory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">"hebrew"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Dates may be converted between calendars via a “Julian Day” number.  A Julian\nDay is the number of whole days and fractions of a day since the beginning of\nthe epoch on 24 November -4713 BCE (Gregorian):</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token function">dateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token comment">// now.year is currently 2013</span>\n\t<span class="token keyword">const</span> jd <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getJulianDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> hebrewDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HebrewDate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>julianday<span class="token operator">:</span> jd<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token comment">// hebrewDate.year is 5773</span></code></pre>\n      </div>\n<p>To format a date in a non-Gregorian Calendar, follow the pattern of creating a\n<code class="language-text">DateFmt</code> object and calling <code class="language-text">format()</code> on it.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">const</span> fmt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateFmt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\tlength<span class="token operator">:</span> <span class="token string">"full"</span><span class="token punctuation">,</span>\n\t\tlocale<span class="token operator">:</span> <span class="token string">"en-US"</span><span class="token punctuation">,</span>\n\t\tcalendar<span class="token operator">:</span> <span class="token string">"hebrew"</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> d <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The value of <code class="language-text">d</code> is <code class="language-text">&quot;Adar 27, 5773 11:47PM PDT&quot;</code>.</p>\n<p>Use <code class="language-text">ilib/CalendarFactory</code> as a factory method to\ncreate the other calendar types.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">import</span> calendarFactory <span class="token keyword">from</span> <span class="token string">\'ilib/lib/CalendarFactory\'</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> cal <span class="token operator">=</span> <span class="token function">calendarFactory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\t<span class="token comment">// looks up calendar for this locale</span>\n\t\tlocale<span class="token operator">:</span> <span class="token string">"nl-NL"</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> days <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">getMonLength</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">days</code> is <code class="language-text">28</code> in regular years and <code class="language-text">29</code> in leap years.</p>\n<h4 id="ranges-and-durations"><a href="#ranges-and-durations" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ranges and Durations</h4>\n<p><code class="language-text">ilib/DateRngFmt</code> may be used to format a date/time range—a period of time with\na specific start point and end point.  As with the other formatter classes, the\nfinal output (e.g., <code class="language-text">&#39;Mar 11-14, 2013&#39;</code>) will depend on the options supplied to\nthe formatter.</p>\n<p>Similarly, <code class="language-text">ilib/DurationFmt</code> lets you format durations—how long things take to\nhappen.  Again, you may customize the output (e.g., <code class="language-text">&#39;36 hours, 24 minutes, and\n37 seconds&#39;</code>) by setting the formatter’s options.</p>\n<h4 id="time-zones"><a href="#time-zones" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Time Zones</h4>\n<p>In many countries, the national government determines the time zone.  In some\ncountries, including the United States, this may be overridden by smaller\njurisdictions such as states/provinces, counties, towns, etc.  Time zones are\nspecified using the IANA convention of “continent/city” (e.g.,\n<code class="language-text">&#39;America/Los_Angeles&#39;</code> or <code class="language-text">&#39;Asia/Seoul&#39;</code>).</p>\n<p><code class="language-text">ilib/TimeZone</code> represents information about a particular time zone.  Instances\nmay be passed to other classes such as <code class="language-text">ilib/DateFmt</code>, although the specifier\nstring itself is also accepted.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">import</span> TimeZone <span class="token keyword">from</span> <span class="token string">\'ilib/lib/TimeZone\'</span><span class="token punctuation">;</span>\n\t<span class="token operator">...</span>\n\t<span class="token keyword">const</span> tz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimeZone</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\tid<span class="token operator">:</span> <span class="token string">"America/Los_Angeles"</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> offset <span class="token operator">=</span> tz<span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token function">dateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">offset</code> is now <code class="language-text">{h: -8, m: 0}</code>.</p>\n<h3 id="numeric-values"><a href="#numeric-values" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Numeric Values</h3>\n<p>The formatting of numeric values—in numbers, currency, and percentages—is\nanother locale-sensitive process.</p>\n<div class="gatsby-highlight" data-language="none">\n      <pre class="language-none"><code class="language-none">--------------------------------------------------------\n Locale    Float           Currency       Percentage\n--------- --------------- -------------- ---------------\n en-US     1,234,567.89    $1,234.56      57.2%\n\n de-DE     1.234.567,89    1.234,56 €     57,2 %\n\n fr-FR     1 234 567,89    1 234,56 €     57,2%\n\n tr-TR     1.234.567,89    1.234,56 TL    % 57,2\n--------------------------------------------------------</code></pre>\n      </div>\n<p>As shown in the following examples, <code class="language-text">iLib</code> handles each of these cases using\n<code class="language-text">ilib/NumFmt</code>.</p>\n<h4 id="numbers"><a href="#numbers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Numbers</h4>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">import</span> NumFmt <span class="token keyword">from</span> <span class="token string">\'ilib/lib/NumFmt\'</span><span class="token punctuation">;</span>\n\t<span class="token operator">...</span>\n\t<span class="token keyword">const</span> fmt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumFmt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\tlocale<span class="token operator">:</span> <span class="token string">"de-DE"</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1234567.89</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">str</code> is now <code class="language-text">&#39;1.234.567,89&#39;</code>.</p>\n<h4 id="currency"><a href="#currency" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Currency</h4>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">const</span> fmt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumFmt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\tstyle<span class="token operator">:</span> <span class="token string">"currency"</span><span class="token punctuation">,</span>\n\t\tcurrency<span class="token operator">:</span> <span class="token string">"EUR"</span><span class="token punctuation">,</span>\n\t\tlocale<span class="token operator">:</span> <span class="token string">"de-DE"</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> amount <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1234.56289</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">amount</code> is now <code class="language-text">&#39;1.234,56 €&#39;</code>.</p>\n<h4 id="percentages"><a href="#percentages" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Percentages</h4>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">\t<span class="token keyword">const</span> fmt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumFmt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\tstyle<span class="token operator">:</span> <span class="token string">"percentage"</span><span class="token punctuation">,</span>\n\t\tmaxFractionDigits<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n\t\tlocale<span class="token operator">:</span> <span class="token string">"tr-TR"</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> percentString <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">0.893453</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">percentString</code> is now <code class="language-text">&#39;% 89,34&#39;</code>.</p>',
frontmatter:{title:"iLib",github:"https://github.com/enactjs/enact/blob/develop/packages/i18n/docs/ilib.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/developer-guide/i18n/updating-locale/"},frontmatter:{title:"Updating Locale"}}},{node:{fields:{slug:"/docs/developer-guide/i18n/"},frontmatter:{title:"i18n (Internationalization)"}}},{node:{fields:{slug:"/docs/developer-guide/i18n/ilib/"},frontmatter:{title:"iLib"}}}]},site:{siteMetadata:{title:"Enact"}},docsPages:{edges:[{node:{path:"/docs/developer-guide/",context:{title:null}}},{node:{path:"/docs/developer-tools/",context:{title:null}}},{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/developer-guide/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/developer-guide/index.js",frontmatter:{title:"Developer Guide"}}},{node:{fields:{slug:"/docs/developer-tools/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/developer-tools/index.js",frontmatter:{title:"Developer Tools"}}},{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/modules/index.js",frontmatter:{title:"API Libraries"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Tutorials"}}}]}},pathContext:{slug:"/docs/developer-guide/i18n/ilib/",title:"iLib",parentRegex:"/\\/docs\\/developer-guide\\/i18n(\\/[^/]*)?\\/$/"}}}});