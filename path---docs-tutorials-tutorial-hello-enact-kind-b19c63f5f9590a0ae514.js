webpackJsonp([0x65356346b6cb],{835:function(e,t){e.exports={data:{markdownRemark:{html:'<p>In <a href="../adding-css/">Adding CSS</a>, we expanded our basic application with classes imported from a CSS Module.  Next up is <a href="#stateless-components">discussing stateless components</a>, why we consider them to be the foundation of any application and <a href="#introducing-kind">introducing our factory</a> for creating them, <code class="language-text">@enact/core/kind</code>.</p>\n<h2 id="stateless-components"><a href="#stateless-components" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Stateless Components</h2>\n<p>Both the power and utility of stateless components lies in their simplicity. They are merely functions that accept properties and return an element. That makes them <a href="#understanding-a-stateless-component">easy to understand</a>, very <a href="#testing-stateless-components">testable</a> and easier to <a href="#pure-functions">optimize for rendering</a>.</p>\n<h3 id="understanding-a-stateless-component"><a href="#understanding-a-stateless-component" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Understanding a Stateless Component</h3>\n<p>Since stateless components are primarily responsible for mapping properties to markup, they are usually very easy to follow. Most, if not all, you write will accept a single argument, <code class="language-text">props</code>, which will provide all the external data you need. You may need to manipulate or adapt these properties and then inject them wherever they are required in the component.</p>\n<p>The <code class="language-text">const App</code> in the code example below is an stateless component.</p>\n<h3 id="testing-stateless-components"><a href="#testing-stateless-components" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Testing Stateless Components</h3>\n<p>Because these components use only the <code class="language-text">props</code> provided to create their markup, unit tests on those transformations do not have to worry about the internal state of the component or mock out complex external services.</p>\n<h3 id="pure-functions"><a href="#pure-functions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Pure Functions</h3>\n<p>Though not a requirement, stateless components should be designed as pure functions, which means that their output is only dependent upon the arguments provided and no external factors (e.g. external modules or impure language features such as <code class="language-text">Date.now()</code>). If a function is pure, we can optimize its render process by caching the outcome for a given set of input <code class="language-text">props</code>.</p>\n<h2 id="introducing-code-classlanguage-textkindcode"><a href="#introducing-code-classlanguage-textkindcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introducing <code class="language-text">kind()</code></h2>\n<p>Although creating a stateless component is itself a relatively straightforward process, there is an amount of boilerplate code that we felt could be safely and efficiently abstracted away behind a framework capability — <code class="language-text">@enact/core/kind</code>.</p>\n<p>There are several features of <code class="language-text">kind()</code> that you may find useful but we’ll only introduce one here. The others will be covered as those features are added to our example application.</p>\n<p><a id="updating-appjs"></a></p>\n<h3 id="updating-appjs"><a href="#updating-appjs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Updating App.js</h3>\n<p>Here’s the updated App module (<code class="language-text">./src/App/App.js</code>) in its entirety:</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">import kind from &#39;@enact/core/kind&#39;;\nimport React from &#39;react&#39;;\n\nimport css from &#39;./App.less&#39;;\n\nconst App = kind({\n\tname: &#39;App&#39;,\n\n\tstyles: {\n\t\tcss,\n\t\tclassName: &#39;app&#39;\n\t},\n\n\trender: function (props) {\n\t\treturn (\n\t\t\t&lt;div className={props.className}&gt;\n\t\t\t\tHello Enact!\n\t\t\t&lt;/div&gt;\n\t\t);\n\t}\n});\n\nexport default App;\nexport {App};</code></pre>\n      </div>\n<h3 id="code-classlanguage-textenactcorecode"><a href="#code-classlanguage-textenactcorecode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="language-text">@enact/core</code></h3>\n<p>We’ve divided the framework into a few discrete modules to make it easy to know where to find capabilities while only including what you actually use in your application. <code class="language-text">@enact/core</code> contains the base capabilities necessary to build an Enact application, of which <code class="language-text">kind()</code> is the most used.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">import kind from &#39;@enact/core/kind&#39;</code></pre>\n      </div>\n<h3 id="code-classlanguage-textkindcode"><a href="#code-classlanguage-textkindcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="language-text">kind()</code></h3>\n<p>The <code class="language-text">kind()</code> factory accepts an object that describes the component. </p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">const App = kind({</code></pre>\n      </div>\n<h4 id="component-name"><a href="#component-name" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Component Name</h4>\n<p><code class="language-text">name</code> is not required but recommended, as it makes both debugging and testing your component easier. By including it, you will be able to find your App’s component in the <a href="https://facebook.github.io/react/blog/2015/09/02/new-react-developer-tools.html">React Developer Tools</a> by name and find instances of it in testing frameworks like <a href="https://github.com/airbnb/enzyme">enzyme</a>.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">\tname: &#39;App&#39;,</code></pre>\n      </div>\n<h4 id="style-handling"><a href="#style-handling" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Style Handling</h4>\n<p><code class="language-text">styles</code> is an optional key that provides several useful features. First, it automatically joins classes sent (through <code class="language-text">props.className</code>) from the containers of your components with the static classes you’ve defined for the component. In other words, if you wish to add a custom CSS class to a single instance of your component but want to retain the static class, you can achieve this by using styles with no extra code. Second, it automatically resolves classes to CSS module names if the <code class="language-text">css</code> subkey is provided.</p>\n<p>For our App component, we’ve configured <code class="language-text">kind()</code> to resolve <code class="language-text">&#39;app&#39;</code> to the locally-scoped class name in our CSS module, <code class="language-text">css</code>, and concatenate it with the <code class="language-text">className</code> provided to our component. The result of this concatenation is published in the <code class="language-text">classes</code> property, which we’ll see <a href="#rendering">demonstrated below</a>.</p>\n<blockquote>\n<p><code class="language-text">styles</code> will always apply the component classes <em>before</em> classes from props.</p>\n</blockquote>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">\tstyles: {\n\t\tcss,\n\t\tclassName: &#39;app&#39;\n\t},</code></pre>\n      </div>\n<blockquote>\n<p><strong>ES6 Object shorthand</strong></p>\n<p>You may have noticed that we’ve specified the <code class="language-text">css</code> key without a value (or is it the value\nwithout the key?!?) in the object literal. We’re taking advantage of an ES6 feature that allows\nyou to pass a variable as an object property if the name of the variable matches the desired\nname of the key. So, by naming our CSS Module import <code class="language-text">css</code>, we’re able to pass it directly to\n<code class="language-text">styles</code> without the extra key name (<code class="language-text">css: css</code>).</p>\n<p>More information on object initialization in ES6 can be found on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015">MDN</a>\nor in the <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer">spec</a>.</p>\n</blockquote>\n<h4 id="rendering"><a href="#rendering" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rendering</h4>\n<p>The only required key is <code class="language-text">render</code>, which expects its value to be the component itself. You’ll notice that we’re accepting a single argument, <code class="language-text">props</code> and passing the <code class="language-text">className</code> property from that object to the <code class="language-text">className</code> property of the <code class="language-text">&lt;div&gt;</code> DOM node.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">\trender: function (props) {\n\t\treturn (\n\t\t\t&lt;div className={props.className}&gt;\n\t\t\t\tHello Enact!\n\t\t\t&lt;/div&gt;\n\t\t);\n\t}\n});</code></pre>\n      </div>\n<h2 id="conclusion"><a href="#conclusion" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Conclusion</h2>\n<p>While we didn’t add much new functionality, we instead laid the groundwork for future features that will be enabled by the capabilities of <code class="language-text">kind()</code>. We covered the benefits of stateless components and how to create them using the <code class="language-text">kind()</code> factory. Next, we’ll show how the styling and features of Moonstone can be easily added to our application.</p>\n<p><strong>Next: <a href="../adding-moonstone-support/">Adding Moonstone Support</a></strong></p>',frontmatter:{title:"Introducing `kind()`",github:"https://github.com/enactjs/docs/blob/develop/src/pages/docs/tutorials/tutorial-hello-enact/kind/index.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/basics/"},frontmatter:{title:"Enact Basics"}}},{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/adding-css/"},frontmatter:{title:"Adding CSS"}}},{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/"},frontmatter:{title:"Hello Enact!"}}},{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/kind/"},frontmatter:{title:"Introducing `kind()`"}}},{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/adding-moonstone-support/"},frontmatter:{title:"Adding Moonstone Support"}}}]},site:{siteMetadata:{title:"I18N & L10N"}},docsPages:{edges:[{node:{path:"/docs/developer-tools/",context:{title:null}}},{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/developer-tools/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/developer-tools/index.js",frontmatter:{title:"Developer Tools"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Tutorials"}}},{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/modules/index.js",frontmatter:{title:"Getting Started"}}}]}},pathContext:{slug:"/docs/tutorials/tutorial-hello-enact/kind/",title:"Introducing `kind()`",parentRegex:"/\\/docs\\/tutorials\\/tutorial-hello-enact(\\/[^/]*)?\\/$/"}}}});