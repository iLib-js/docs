webpackJsonp([0xcdf39df92564],{933:function(n,a){n.exports={data:{markdownRemark:{html:'<nav role="navigation" class="page-toc">\n<ul>\n<li><a href="#creating-stateless-functional-components">Creating Stateless Functional Components</a></li>\n<li><a href="#sfcs-compared-with-react-components">SFCs Compared with React Components</a></li>\n<li><a href="#higher-order-components">Higher-Order Components</a></li>\n<li><a href="#customizing-components-at-design-time">Customizing Components at Design-Time</a></li>\n</ul>\n</nav>\n<p>The Enact framework is built upon the foundation of <a href="https://facebook.github.io/react">React</a>.\nAs a result, any component that is built for React can be used in Enact and any of the patterns for\ncreating a component in React can also be used in Enact. To address some of the common use cases we\nencountered, we’ve included a few modules with <code class="language-text">@enact/core</code> that standardize the “Enact way” for\nand provide some ‘sugar’ to reduce developer boilerplate.</p>\n<h2 id="creating-stateless-functional-components"><a href="#creating-stateless-functional-components" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating Stateless Functional Components</h2>\n<p>We’ve found that Stateless Functional Components (SFCs) are a great way to decompose your\napplication. A primary role of a user interface component is to provide a mapping of the\nComputer’s model into the User’s mental model. SFCs are a pure implementation of this\nresponsibility. They accept an object of properties and map them into a component hierarchy using\nJSX.</p>\n<p>In very simple components, a single function is sufficient to perform that mapping. However, as\ncomponents grow more complex, you often find that you need to merge incoming data with fixed data or\ntransform incoming data into other formats. This often leads you to decompose logic out of your main\nrender method for improved clarity and maintainability. This process led us to create\n<code class="language-text">@enact/core/kind</code>.</p>\n<p>The <code class="language-text">kind()</code> factory creates SFCs from a configuration object. It adds declarative sugar for setting\nthe display name, merging incoming <code class="language-text">className</code> and <code class="language-text">style</code> properties with component values, and computing property\nvalues, allowing you to merge or transform incoming data outside of your render function.</p>\n<p>Unlike simple functions which must be declared before any metadata can be attached, <code class="language-text">kind()</code>\ncomponents encourage a consistent ordering of keys for top-down readability:</p>\n<blockquote>\n<p>The <code class="language-text">name</code> component accepts these <code class="language-text">propTypes</code>, which have the following default values,\n<code class="language-text">defaultProps</code>. It is formatted according to the CSS modules map and <code class="language-text">className</code> in <code class="language-text">styles</code>. That\ndata is used to produce several <code class="language-text">computed</code> properties which ultimately are provided to <code class="language-text">render</code> to\ncreate the final component hierarchy.</p>\n</blockquote>\n<p>For the following sample, the <code class="language-text">&#39;Badge&#39;</code> component accepts the <code class="language-text">children</code> and <code class="language-text">greeting</code> properties, with\n<code class="language-text">greeting</code> having a default of <code class="language-text">&#39;Hello, my name is ...&#39;</code>. It applies the <code class="language-text">&#39;badge&#39;</code> <code class="language-text">className</code> (combined\nwith any passed-in <code class="language-text">className</code>), it computes a new value for <code class="language-text">children</code> and renders the result.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> kind <span class="token keyword">from</span> <span class="token string">\'@enact/core/kind\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">\'prop-types\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Badge <span class="token operator">=</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">\'Badge\'</span><span class="token punctuation">,</span>\n\n\tpropTypes<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tchildren<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n\t\tgreeting<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\tdefaultProps<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tgreeting<span class="token operator">:</span> <span class="token string">\'Hello, my name is ...\'</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\tstyles<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tcss<span class="token punctuation">,</span>\n\t\tclassName<span class="token operator">:</span> <span class="token string">\'badge\'</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\tcomputed<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token function-variable function">children</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>children<span class="token punctuation">,</span> greeting<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>greeting<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>children<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\t<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>children<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">delete</span> rest<span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t\t<span class="token operator">&lt;</span>div <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token operator">></span>\n\t\t\t\t<span class="token punctuation">{</span>children<span class="token punctuation">}</span>\n\t\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\t\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<blockquote>\n<p>Note: You should be sure to delete any properties that are only used in calculations to avoid warnings during rendering.</p>\n</blockquote>\n<h2 id="sfcs-compared-with-react-components"><a href="#sfcs-compared-with-react-components" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SFCs Compared with React Components</h2>\n<p>While SFCs have some important benefits, not every problem can be effectively solved with them\nalone. Sometimes creating component instances that extend <code class="language-text">React.Component</code> is necessary. Here are a\nfew possible reasons:</p>\n<ul>\n<li>You need access to the <a href="https://facebook.github.io/react/docs/react-component.html#the-component-lifecycle">component lifecycle methods</a></li>\n<li>You need to maintain some component state (and it’s not managed by something like Redux)</li>\n<li>You need consistent event handler references to prevent unnecessary renders</li>\n<li>You need to expose imperative APIs (though you should always avoid this when possible)</li>\n</ul>\n<p>The way in which you would achieve each of these is beyond the scope of this discussion but each are\nvalid reasons to create a custom instance of <code class="language-text">React.Component</code>. However, these reasons do not\npreclude you from creating an SFC for the primary render logic. Your <code class="language-text">React.Component</code> can do\nwhatever work it needs to do and defer the property-to-user-interface mapping to the SFC.</p>\n<h2 id="higher-order-components"><a href="#higher-order-components" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Higher-Order Components</h2>\n<p>Higher-Order Components (HOCs) are useful for adding behavior or chrome UI around other independent\ncomponents. In the general sense, they are functions that accept a component (a native DOM node like\n<code class="language-text">div</code>, an SFC, or a <code class="language-text">React.Component</code>), decorate that component in some way, and return either the\noriginal component or a new component that wraps the original component.</p>\n<p>Enact provides several HOCs within <code class="language-text">@enact/ui</code> and <code class="language-text">@enact/moonstone</code> that allow us to provide consistent\nbehaviors across components. All of these HOCs were created using the <code class="language-text">hoc()</code> factory from\n<code class="language-text">@enact/core/hoc</code>. This factory gives them a couple key features:</p>\n<ul>\n<li>HOCs can be configurable by passing an object with parameters to the HOC function. This object is\nmerged with a set of default configuration parameters.</li>\n<li>\n<p>HOCs are flexible in their usage. They can:</p>\n<ul>\n<li>\n<p>Accept a configuration object and a component</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ToggleableWidget <span class="token operator">=</span> <span class="token function">Toggleable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>toggle<span class="token operator">:</span> <span class="token string">\'onClick\'</span><span class="token punctuation">,</span> prop<span class="token operator">:</span> <span class="token string">\'selected\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Widget<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n</li>\n<li>\n<p>Accept only a component and use the default configuration:</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ToggleableWidget <span class="token operator">=</span> <span class="token function">Toggleable</span><span class="token punctuation">(</span>Widget<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n</li>\n<li>\n<p>Accept a configuration object in one invocation and a component in a second invocation. This\nallows you to reuse a pre-configured HOC on multiple components:</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ToggleDecorator <span class="token operator">=</span> <span class="token function">Toggleable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>toggle<span class="token operator">:</span> <span class="token string">\'onClick\'</span><span class="token punctuation">,</span> prop<span class="token operator">:</span> <span class="token string">\'selected\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ToggleableWidget <span class="token operator">=</span> <span class="token function">ToggleDecorator</span><span class="token punctuation">(</span>Widget<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ToggleableFrob <span class="token operator">=</span> <span class="token function">ToggleDecorator</span><span class="token punctuation">(</span>Frob<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n</li>\n</ul>\n</li>\n</ul>\n<p>If you need to create your own HOCs, you can import the <code class="language-text">hoc()</code> factory to take advantage of these\nfeatures. The factory accepts an optional default configuration object and a function. The\nfunction will receive the merged configuration object and the Wrapped component and should return\na component.</p>\n<p>Here’s a simple example to illustrate:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> Countable <span class="token operator">=</span> <span class="token function">hoc</span><span class="token punctuation">(</span><span class="token punctuation">{</span>prop<span class="token operator">:</span> <span class="token string">\'data-count\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> Wrapped</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>\n\t\t<span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\t\t\tcount<span class="token operator">:</span> <span class="token number">0</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">inc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t<span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">const</span> props <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token punctuation">[</span>config<span class="token punctuation">.</span>prop<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>\n\t\t\t\tonClick<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inc\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">return</span> <span class="token operator">&lt;</span>Wrapped <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> CountableAsDataNumber <span class="token operator">=</span> <span class="token function">Countable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>prop<span class="token operator">:</span> <span class="token string">\'data-number\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> CountableDiv <span class="token operator">=</span> <span class="token function">Countable</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> CountableDivAsDataNumber <span class="token operator">=</span> <span class="token function">CountableAsDataNumber</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="customizing-components-at-design-time"><a href="#customizing-components-at-design-time" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Customizing Components at Design-Time</h2>\n<p>Occasionally, you’ll want to modify the appearance of an Enact component, and usually, simply applying external styling to the outer-most element of the component, via <code class="language-text">className</code> or <code class="language-text">style</code> will work just fine. However, what if you need to customize one of the deeper child elements?</p>\n<p>We’ve got you covered! In Enact 2.0 we’ve added a built-in theming capability to make this significantly easier and even safer. Using the <a href="../theming/">theming system</a> is as straight-forward as importing your CSS/LESS file and passing it to the <code class="language-text">css</code> prop on the component you want to customize. The class names defined in your CSS file that match the published class names of the target component will be applied directly to the internal elements of the component. They will be applied in addition to the existing class names, not in lieu of, so you can simply add your customizations, rather than repeat the existing styling. Each customizable component will include documentation for the <code class="language-text">css</code> prop, which will list what classes are available and a brief description of what role they play.</p>\n<p>How about an example to make this more clear. Let’s customize the background color of a <a href="../../modules/moonstone/Button/"><code class="language-text">moonstone/Button</code></a>. <code class="language-text">Button</code> exposes several classes for customization: ‘button’, ‘bg’, ‘small’, and ‘selected’, and in this case we’re interested in ‘button’ and ‘bg’.  In our customized component LESS file, the following should do the trick:</p>\n<div class="gatsby-highlight" data-language="css">\n      <pre class="language-css"><code class="language-css">// CustomButton.less\n//\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">\'~@enact/moonstone/styles/skin.less\'</span><span class="token punctuation">;</span></span>\n\n<span class="token selector">.button</span> <span class="token punctuation">{</span>\n\t<span class="token selector">.applySkins(</span><span class="token punctuation">{</span>\n\t\t<span class="token selector">.bg</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><em>The <code class="language-text">.applySkins</code> is added here because Moonstone uses our skinning system too, which is in charge of applying colors independent from measurements, layout, and metrics.</em></p>\n<p>Then, in our component we’ll just apply the imported LESS file to the component with the <code class="language-text">css</code> property.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> kind <span class="token keyword">from</span> <span class="token string">\'@enact/core/kind\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">\'@enact/moonstone/Button\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> css <span class="token keyword">from</span> <span class="token string">\'./CustomButton.less\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> CustomButton <span class="token operator">=</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">\'CustomizedButton\'</span><span class="token punctuation">,</span>\n\n\t<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>children<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t\t<span class="token operator">&lt;</span>Button <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> css<span class="token operator">=</span><span class="token punctuation">{</span>css<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> CustomButton<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Now, all we do in our app is import this <code class="language-text">CustomButton</code> like any other, and it will be styled with our custom styling.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> CustomButton <span class="token keyword">from</span> <span class="token string">\'./CustomButton\'</span><span class="token punctuation">;</span>\n\n<span class="token operator">...</span>\n\n\t<span class="token operator">&lt;</span>CustomButton<span class="token operator">></span>Our Orange Button<span class="token operator">&lt;</span><span class="token operator">/</span>CustomButton<span class="token operator">></span></code></pre>\n      </div>\n<p>For more details and advanced theming features and recommendations, see our <a href="../theming/">Theming Guide</a>.</p>',frontmatter:{title:"Creating Components the Enact Way",github:"https://github.com/enactjs/enact/blob/develop/docs/creating-components.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/developer-guide/accessibility/"},frontmatter:{title:"Accessibility Support in Enact"}}},{node:{fields:{slug:"/docs/developer-guide/resources/"},frontmatter:{title:"Additional Developer Resources"}}},{node:{fields:{slug:"/docs/developer-guide/contributing/"},frontmatter:{title:"Contribution Guide"}}},{node:{fields:{slug:"/docs/developer-guide/creating-components/"},frontmatter:{title:"Creating Components the Enact Way"}}},{node:{fields:{slug:"/docs/developer-guide/best-practices/"},frontmatter:{title:"Enact Best Practices"}}},{node:{fields:{slug:"/docs/developer-guide/performance/"},frontmatter:{title:"Enact Performance Guide"}}},{node:{fields:{slug:"/docs/developer-guide/glossary/"},frontmatter:{title:"Glossary"}}},{node:{fields:{slug:"/docs/developer-guide/migration/"},frontmatter:{title:"Migration Guides"}}},{node:{fields:{slug:"/docs/developer-guide/redux/"},frontmatter:{title:"Redux"}}},{node:{fields:{slug:"/docs/developer-guide/spotlight/"},frontmatter:{title:"Spotlight"}}},{node:{fields:{slug:"/docs/developer-guide/testing-components/"},frontmatter:{title:"Testing Your Components"}}},{node:{fields:{slug:"/docs/developer-guide/theming/"},frontmatter:{title:"Theming"}}},{node:{fields:{slug:"/docs/developer-guide/interoperability/"},frontmatter:{title:"Using Enact with Third-party Libraries"}}},{node:{fields:{slug:"/docs/developer-guide/why-use-kind/"},frontmatter:{title:"Why Use kind()?"}}},{node:{fields:{slug:"/docs/developer-guide/i18n/"},frontmatter:{title:"i18n (Internationalization)"}}},{node:{fields:{slug:"/docs/developer-guide/webos/"},frontmatter:{title:"webOS Support Module"}}}]},site:{siteMetadata:{title:"I18N & L10N"}},docsPages:{edges:[{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/modules/index.js",frontmatter:{title:"Getting Started"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Internationalization"}}}]}},pathContext:{slug:"/docs/developer-guide/creating-components/",title:"Creating Components the Enact Way",parentRegex:"/\\/docs\\/developer-guide(\\/[^/]*)?\\/$/"}}}});