webpackJsonp([0xd1777099c2ec],{959:function(n,s){n.exports={data:{markdownRemark:{html:'<p>Most complex apps rely heavily on fetching data asynchronously. In this document, we present techniques used in Redux to handle an asynchronous data flow.</p>\n<h3 id="introduction-to-middleware-and-code-classlanguage-textredux-thunkcode"><a href="#introduction-to-middleware-and-code-classlanguage-textredux-thunkcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction to Middleware and <code class="language-text">redux-thunk</code></h3>\n<p>When using an API, you are probably dealing with asynchronous actions. However, the Redux store only supports synchronous actions without using <a href="http://redux.js.org/docs/advanced/Middleware.html">middleware</a> (more on that later). To use middleware in Redux, we use the <a href="http://redux.js.org/docs/api/applyMiddleware.html"><code class="language-text">applyMiddleware()</code></a> store enhancer from Redux. <code class="language-text">redux-thunk</code> middleware is the standard way to handle asynchronous actions.</p>\n<p>We use <code class="language-text">redux-thunk</code> middleware to enable asynchronous requests to work with synchronous action creators. It allows an action creator to return a function instead of an object (action) and executes that function when it is returned. This allows non-pure actions (i.e. ones that can call APIs that might have different data each time). These action creators can dispatch other actions, so, for example, you can dispatch a <code class="language-text">REQUEST_BEGIN</code> action, then fetch remote data asynchronously and, after it returns, dispatch the <code class="language-text">REQUEST_SUCCESS</code> or <code class="language-text">REQUEST_ERROR</code> actions.</p>\n<p>For example, you can create an async incrementer as follows:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">INCREMENT_COUNTER</span> <span class="token operator">=</span> <span class="token string">\'INCREMENT_COUNTER\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token constant">INCREMENT_COUNTER</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">incrementAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token parameter">dispatch</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="ls2request-example"><a href="#ls2request-example" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LS2Request Example</h3>\n<p>A combination of <code class="language-text">redux-thunk</code> and <code class="language-text">LS2Request</code> allows us to fetch and display data in a React component. <code class="language-text">LS2Request</code> is a wrapper component for <code class="language-text">PalmServiceBridge</code> and is available from <code class="language-text">@enact/webos/LS2Request</code>. The following example shows a simple fetch routine.</p>\n<p>At the root level, we use <code class="language-text">&lt;Provider /&gt;</code> to pass store down the component hierarchy.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>render<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>Provider<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> configureStore <span class="token keyword">from</span> <span class="token string">\'./store\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./containers/App\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">render</span><span class="token punctuation">(</span>\n\t<span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>\n\t\t<span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>\n\t<span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">,</span>\n\tdocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Store is configured to accept thunk middleware</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>createStore<span class="token punctuation">,</span> applyMiddleware<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> thunkMiddleware <span class="token keyword">from</span> <span class="token string">\'redux-thunk\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> systemSettingsReducer <span class="token keyword">from</span> <span class="token string">\'../reducers\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">configureStore</span> <span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>\n\t\tsystemSettingsReducer<span class="token punctuation">,</span>\n\t\tinitialState<span class="token punctuation">,</span>\n\t\t<span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunkMiddleware<span class="token punctuation">)</span> <span class="token comment">// lets us dispatch functions</span>\n\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> store<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Here we create a thunk action creator which returns a function instead of a plain object. It is also possible to dispatch an action or request at the beginning.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> LS2Request <span class="token keyword">from</span> <span class="token string">\'@enact/webos/LS2Request\'</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">receiveSystemSettings</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\ttype<span class="token operator">:</span> <span class="token string">\'RECEIVE_SYSTEM_SETTINGS\'</span><span class="token punctuation">,</span>\n\t\tpayload<span class="token operator">:</span> res\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// function returning function!</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getSystemSettings</span> <span class="token operator">=</span> <span class="token parameter">params</span> <span class="token operator">=></span> <span class="token parameter">dispatch</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token comment">// possible to dispatch an action at the start of fetching</span>\n\t<span class="token comment">// dispatch({type: \'FETCH_SYSETEM_SETTINGS\'});</span>\n\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LS2Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\tservice<span class="token operator">:</span> <span class="token string">\'luna://com.webos.settingsservice/\'</span><span class="token punctuation">,</span>\n\t\tmethod<span class="token operator">:</span> <span class="token string">\'getSystemSettings\'</span><span class="token punctuation">,</span>\n\t\tparameters<span class="token operator">:</span> params<span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// dispatches action on success callback with payload</span>\n\t\t\t<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">receiveSystemSettings</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Reducer receives a payload and creates a new state.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">systemSettingsReducer</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">case</span> <span class="token string">\'RECEIVE_SYSTEM_SETTINGS\'</span><span class="token operator">:</span>\n\t\t\t<span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">default</span><span class="token operator">:</span>\n\t\t\t<span class="token keyword">return</span> state<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Connected container dispatches <code class="language-text">getSystemSettings</code> on componentDidMount and renders a <code class="language-text">pictureMode</code> prop that’s been hooked up with a redux store.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>connect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>getSystemSettings<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../actions\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n\t<span class="token function">componentDidMount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">getSystemSettings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\t\tcategory<span class="token operator">:</span> <span class="token string">\'picture\'</span><span class="token punctuation">,</span>\n\t\t\tkey<span class="token operator">:</span> <span class="token string">\'pictureMode\'</span><span class="token punctuation">,</span>\n\t\t\tsubscribe<span class="token operator">:</span> <span class="token boolean">true</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>pictureMode<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>',frontmatter:{title:"Async Actions",github:"https://github.com/enactjs/enact/blob/develop/docs/redux/redux-async.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/developer-guide/redux/redux-intro/"},frontmatter:{title:"Introduction to Redux"}}},{node:{fields:{slug:"/docs/developer-guide/redux/redux-async/"},frontmatter:{title:"Async Actions"}}},{node:{fields:{slug:"/docs/developer-guide/redux/"},frontmatter:{title:"Redux"}}}]},site:{siteMetadata:{title:"Enact"}},docsPages:{edges:[{node:{path:"/docs/developer-guide/",context:{title:null}}},{node:{path:"/docs/developer-tools/",context:{title:null}}},{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/developer-guide/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/developer-guide/index.js",frontmatter:{title:"Developer Guide"}}},{node:{fields:{slug:"/docs/developer-tools/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/developer-tools/index.js",frontmatter:{title:"Developer Tools"}}},{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/modules/index.js",frontmatter:{title:"API Libraries"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Tutorials"}}}]}},pathContext:{slug:"/docs/developer-guide/redux/redux-async/",title:"Async Actions",parentRegex:"/\\/docs\\/developer-guide\\/redux(\\/[^/]*)?\\/$/"}}}});