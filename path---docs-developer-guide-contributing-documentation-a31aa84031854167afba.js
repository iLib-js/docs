webpackJsonp([0x86b59705dc4b],{931:function(e,t){e.exports={data:{markdownRemark:{html:'<nav role="navigation" class="page-toc">\n<ul>\n<li><a href="#documentation-overview">Documentation Overview</a></li>\n<li><a href="#module-documentation">Module Documentation</a></li>\n<li><a href="#class-level-documentation">Class Level Documentation</a></li>\n<li><a href="#property-level-documentation">Property Level Documentation</a></li>\n<li><a href="#special-cases">Special Cases</a></li>\n<li><a href="#the-enact-voice">The Enact Voice</a></li>\n<li><a href="#verifying-correct-documentation">Verifying Correct Documentation</a></li>\n</ul>\n</nav>\n<p>Almost all documentation for Enact is generated directly from the source code or from files stored within the Enact repository. It is important that in-line documentation is correct as developers will rely on this information.</p>\n<h2 id="documentation-overview"><a href="#documentation-overview" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation Overview</h2>\n<p>In-line documentation uses standard <a href="http://usejsdoc.org/">jsDoc tags</a> with some additional Enact-specific tags. In-line documentation appears within comment blocks that begin with double asterisks:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">/**\n * jsdoc Comment\n */</span></code></pre>\n      </div>\n<p>Descriptions within jsDoc comments use <a href="https://daringfireball.net/projects/markdown/syntax">Markdown</a>. Enact style is to set off variable names, properties, short sections of code, types and other symbolic information within code markers: <code class="language-text">`name`</code>. Filenames are set off with double asterisks:  <code class="language-text">**package.json**</code>. Code blocks, when they appear, should be set off with the code block marker: <code class="language-text">```</code>.</p>\n<p>There are three general levels of documentation that will appear within the source files of Enact modules.  Each will be discussed in turn.</p>\n<h2 id="module-documentation"><a href="#module-documentation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Module Documentation</h2>\n<p>Each module (and, consequently, directory) within Enact should have one (and only one) file that includes the <code class="language-text">@module</code> tag. The name of the module should be prefixed with the name of the package that contains it (e.g. <code class="language-text">moonstone/Button</code>). Each module has a limited number of exports so they should be documented within the module block using the <code class="language-text">@exports</code> tag. The module description should not list the exports or repeat information that should appear at the component level.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">/**\n * Provides Moonstone-themed button components and behaviors.\n *\n * @example\n * &lt;Button size="small">Hello Enact!&lt;/Button>\n *\n * @module moonstone/Button\n * @exports Button\n * @exports ButtonBase\n * @exports ButtonDecorator\n */</span></code></pre>\n      </div>\n<p>Usually this block will appear in the file with the same name as the module.  If the module uses an <strong>index.js</strong> file to export, it should appear there.</p>\n<p>If possible, include an executable example showing the module using the <code class="language-text">@example</code> tag.</p>\n<h2 id="class-level-documentation"><a href="#class-level-documentation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Class Level Documentation</h2>\n<p>Class level documentation includes components and higher-order components (HOCs).  Each component or HOC export should have a class level block that discusses the features and provides an example usage. This block also serves as a place to indicate any HOCs that may be applied or to cross-reference related components.</p>\n<h3 id="components"><a href="#components" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Components</h3>\n<p>Below is an example block for a component:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">/**\n * A Moonstone-styled button with built-in support for tooltips, marqueed text, and\n * Spotlight focus.\n *\n * Usage:\n * ```\n * &lt;Button>Press me!&lt;/Button>\n * ```\n *\n * @class Button\n * @memberof moonstone/Button\n * @extends moonstone/Button.ButtonBase\n * @mixes moonstone/Button.ButtonDecorator\n * @ui\n * @public\n */</span></code></pre>\n      </div>\n<ul>\n<li><code class="language-text">@link</code> tags can be used to link to related materials.</li>\n<li><code class="language-text">@class</code> should include the name of the object being documented.</li>\n<li><code class="language-text">@memberof</code> is required and should reflect the name of the module the object belongs to.</li>\n<li><code class="language-text">@extends</code> is used when a componentâ€™s root element is another public custom component.</li>\n<li><code class="language-text">@mixes</code> is used to call out HOCs that may be applied.</li>\n<li><code class="language-text">@ui</code> is a custom tag that should be applied to any component that creates visible controls.</li>\n<li><code class="language-text">@public</code> should be used for any component or HOC that is exported. Unexported objects should be marked <code class="language-text">@private</code> to prevent them from appearing in the documentation.</li>\n<li>Note: The Usage example is not runnable and will not render a preview.</li>\n</ul>\n<h3 id="higher-order-components"><a href="#higher-order-components" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Higher-order Components</h3>\n<p>Below is an example of HOC declaration:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">/**\n * A higher-order component that provides a consistent set of pointer events -- `onDown`, `onUp`,\n * and `onTap` -- across mouse and touch interfaces along with support for common gestures including\n * `onFlick`, `onDrag`, `onHold`, and `onHoldPulse`.\n *\n * @class Touchable\n * @memberof ui/Touchable\n * @hoc\n * @public\n */</span></code></pre>\n      </div>\n<ul>\n<li><code class="language-text">@class</code>, <code class="language-text">@memberof</code> and <code class="language-text">@public</code> are as above</li>\n<li><code class="language-text">@hoc</code> is used to identify higher-order components</li>\n</ul>\n<p>HOCs that include configurable options should be documented as follows:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">/**\n * Default config for {@link ui/Touchable.Touchable}.\n *\n * @memberof ui/Touchable.Touchable\n * @hocconfig\n */</span>\n<span class="token keyword">const</span> defaultConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token comment">/**\n\t * Configures the prop name to pass the active state to the wrapped component\n\t *\n\t * @type {String}\n\t * @default null\n\t * @memberof ui/Touchable.Touchable.defaultConfig\n\t */</span>\n\tactiveProp<span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<ul>\n<li><code class="language-text">@memberof</code> needs to be applied both to the default config object itself and all its members. HOC configs should be a member of the HOC component, not the module it is a member of.</li>\n<li><code class="language-text">@hocconfig</code> is an Enact-specific tag used to flag HOC config objects</li>\n<li><code class="language-text">@type</code> and <code class="language-text">@default</code> are used for identifying properties and will be discussed more in the section on properties below</li>\n</ul>\n<h2 id="property-level-documentation"><a href="#property-level-documentation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Property Level Documentation</h2>\n<p>Property-level documentation refers to documentation within a component or HOC. In particular, this refers to the public API provided via properties. Each component (even those within HOCs) that has a <code class="language-text">propTypes</code> member should be documented as follows:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">propTypes<span class="token operator">:</span> <span class="token comment">/** @lends moonstone/ExpandableList.ExpandableListBase.prototype */</span> <span class="token punctuation">{</span>\n<span class="token comment">/**\n\t* The items to be displayed in the list\n\t*\n\t* @type {String[]}\n\t* @required\n\t* @public\n\t*/</span>\nchildren<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">arrayOf</span><span class="token punctuation">(</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n<span class="token operator">...</span>\n<span class="token comment">/**\n\t* Selection mode for the list\n\t*\n\t* * `\'single\'` - Allows for 0 or 1 item to be selected. The selected item may be deselected.\n\t* * `\'radio\'` - Allows for 0 or 1 item to be selected. The selected item may only be\n\t*    deselected by selecting another item.\n\t* * `\'multiple\'` - Allows 0 to _n_ items to be selected. Each item may be selected or\n\t*    deselected.\n\t*\n\t* @type {String}\n\t* @default \'single\'\n\t* @public\n\t*/</span>\nselect<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">oneOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'single\'</span><span class="token punctuation">,</span> <span class="token string">\'radio\'</span><span class="token punctuation">,</span> <span class="token string">\'multiple\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n<span class="token comment">/**\n\t* Index or array of indices of the selected item(s)\n\t*\n\t* @type {Number|Number[]}\n\t* @public\n\t*/</span>\nselected<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">oneOfType</span><span class="token punctuation">(</span><span class="token punctuation">[</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span> PropTypes<span class="token punctuation">.</span><span class="token function">arrayOf</span><span class="token punctuation">(</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<ul>\n<li>In the description, be sure to call out anything important about the property. If the property only accepts a range of inputs, list the appropriate values, being sure to use code blocks to set off the values. If the property relates to another property, be sure to provide a <code class="language-text">@link</code> to the other property.</li>\n<li><code class="language-text">@lends</code> must appear following the colon (or equal if it is a HOC and you are extending React.Component) and before the <code class="language-text">{</code> in the <code class="language-text">proptypes</code> declaration.  The string following <code class="language-text">@lends</code> can be constructed with the following formula:  Module Name + â€™.â€™ + Component Name + â€˜.prototypeâ€™</li>\n<li><code class="language-text">@type</code> is used to indicate the type or types the property accepts. Multiple types are separated by the pipe character <code class="language-text">|</code> and arrays are indicated by adding <code class="language-text">[]</code> to the base type. Common types include: <code class="language-text">Number</code>, <code class="language-text">String</code>, <code class="language-text">Object</code>, <code class="language-text">Boolean</code> and <code class="language-text">Node</code>. Type definitions for custom types can be created.</li>\n<li><code class="language-text">@required</code> should be applied to any property that has <code class="language-text">isRequired</code> set on it.</li>\n<li><code class="language-text">@default</code> can be used to indicate the default value (if applicable) of a property. Only properties that appear in the <code class="language-text">defaultProps</code> section should use this. Values should not be wrapped in code blocks.</li>\n</ul>\n<p>In general, we do not provide jsDoc comments for methods that appear within components as we generally do not expose public methods this way.</p>\n<blockquote>\n<p>Note: We use three types to refer to renderable items: <code class="language-text">Node</code>, <code class="language-text">Element</code>, and <code class="language-text">Component</code>.</p>\n<ul>\n<li><code class="language-text">Node</code> refers to one or more renderable values which may be strings, booleans, or Elements: <code class="language-text">&lt;div&gt;HTML Element&lt;/div&gt;</code>, <code class="language-text">&lt;Button&gt;React Component&lt;/Button&gt;</code>, or <code class="language-text">&#39;string&#39;</code>;</li>\n<li><code class="language-text">Element</code> is a single instance of React.Element as returned by a JSX element (or <code class="language-text">React.createElement</code>): <code class="language-text">&lt;div&gt;HTML Element&lt;/div&gt;</code> or <code class="language-text">&lt;Button&gt;React Component&lt;/Button&gt;</code></li>\n<li><code class="language-text">Component</code> is a function or class that returns a React.Element (e.g.: <code class="language-text">&#39;div&#39;</code> or <code class="language-text">Button</code>). This will typically be used to create dynamic JSX; something like: <code class="language-text">render ({YourProp}) =&gt; { return (&lt;YourProp /&gt;); }</code></li>\n</ul>\n</blockquote>\n<h2 id="special-cases"><a href="#special-cases" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Special Cases</h2>\n<p>There are some special cases that appear within the Enact framework. One example is <code class="language-text">core/dispatcher</code>, which exports a set of utility functions. In this file, there are no class-level exports and all the functions are documented using jsDoc tags.  Here is the documentation for the <code class="language-text">on</code> function:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">/**\n * Adds a new global event listener\n *\n * @function\n * @param\t{String}\tname\t\t\t\tEvent name\n * @param\t{Function}\tfn\t\t\t\t\tEvent handler\n * @param\t{Node}\t\t[target=`document`]\tEvent listener target\n *\n * @returns {undefined}\n * @memberof core/dispatcher\n */</span></code></pre>\n      </div>\n<ul>\n<li><code class="language-text">@function</code> indicates the documentation belongs to a function.</li>\n<li><code class="language-text">@param</code> should be repeated for each parameter. The type(s) is set within curly braces, followed by the name of the parameter. A short description of the parameter follows. Default parameter values are documented by including them within square brackets in the name position as shown above.</li>\n<li><code class="language-text">@returns</code> indicates the type of the return. Functions that have no return should be documented as returning <code class="language-text">{undefined}</code> to keep ESLint happy.</li>\n</ul>\n<h2 id="the-enact-voice"><a href="#the-enact-voice" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Enact Voice</h2>\n<p>Enact docs should strive to have a common voice.  They should be concise, informative and, as appropriate, a bit playful.  Donâ€™t be afraid to inject a little bit of fun into what could otherwise be dry reading.</p>\n<p>Tips:</p>\n<ul>\n<li>Use the active voice when writing docs.</li>\n<li>Descriptions should focus on what the componet or property provides.</li>\n<li>Only document the <code class="language-text">true</code> state for boolean propertues unless the <code class="language-text">false</code> stateâ€™s operation is unclear.</li>\n<li>Property descriptions use the present tense and complete either â€˜This property â€¦â€™ or â€˜This property configures â€¦â€™</li>\n<li>Callbacks use the future perfect tense and complete the sentence â€˜This callback will be â€¦â€™</li>\n<li>Imperative methods (rarely used) use the present tense and completes the sentence â€˜Call this method to â€¦â€™</li>\n</ul>\n<p>Good:</p>\n<ul>\n<li>A Moonstone-styled button with built-in support for â€¦</li>\n<li>The color of the underline beneath buttonâ€™s content.</li>\n<li>Applies a disabled style and prevents interacting with the component.</li>\n<li>Called when the internal input is focused.</li>\n</ul>\n<p>Could be better:</p>\n<ul>\n<li>This component could be used to display a button â€¦</li>\n<li>Set this to change the color of the underline beneath the buttonâ€™s content.</li>\n<li>Controls whether the item is expanded or not.</li>\n<li>A callback function invoked when the internal input is focused.</li>\n</ul>\n<h2 id="verifying-correct-documentation"><a href="#verifying-correct-documentation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Verifying Correct Documentation</h2>\n<p>Errors in documentation can prevent the doc tool from correctly generating our docs. Always run the <code class="language-text">parse</code> command over the documentation to be sure there are no parse warnings. To do this, follow these steps:</p>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:enactjs/docs.git\n<span class="token builtin class-name">cd</span> docs\n<span class="token function">npm</span> <span class="token function">install</span>\n<span class="token function">rm</span> -rf raw/enact\n<span class="token function">ln</span> -s /path/to/your/enact/repo raw/enact\n<span class="token function">npm</span> run parse</code></pre>\n      </div>\n<p>The <code class="language-text">parse</code> command should execute without any warnings (e.g. â€˜Too many docletsâ€™).</p>',frontmatter:{title:"Documentation Style Guide",github:"https://github.com/enactjs/enact/blob/develop/docs/contributing/documentation.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/developer-guide/contributing/building-enact-locally/"},frontmatter:{title:"Building Enact Locally"}}},{node:{fields:{slug:"/docs/developer-guide/contributing/"},frontmatter:{title:"Contribution Guide"}}},{node:{fields:{slug:"/docs/developer-guide/contributing/documentation/"},frontmatter:{title:"Documentation Style Guide"}}},{node:{fields:{slug:"/docs/developer-guide/contributing/changelogs/"},frontmatter:{title:"Documenting Changes"}}},{node:{fields:{slug:"/docs/developer-guide/contributing/dco/"},frontmatter:{title:"Enact Developer Certificate of Origin"}}}]},site:{siteMetadata:{title:"I18N & L10N"}},docsPages:{edges:[{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Internationalization"}}},{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/modules/index.js",frontmatter:{title:"Getting Started"}}}]}},pathContext:{slug:"/docs/developer-guide/contributing/documentation/",title:"Documentation Style Guide",parentRegex:"/\\/docs\\/developer-guide\\/contributing(\\/[^/]*)?\\/$/"}}}});