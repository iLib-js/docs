webpackJsonp([72705564784272],{832:function(e,t){e.exports={data:{markdownRemark:{html:'<p>With our <a href="../basics/">basic Hello Enact!</a> app built and running, we can start to expand\nit by adding some styling. The first stop is defining and managing <a href="#css-classes-in-react">CSS classes in React</a> followed by exploring <a href="#introducing-css-modules">CSS modules</a>.</p>\n<h2 id="css-classes-in-react"><a href="#css-classes-in-react" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CSS Classes in React</h2>\n<p>CSS classes are the primary tool for adding visual styling to applications. Classes are assigned\nto components using the <code class="language-text">className</code> property. </p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">&lt;div className=&quot;customClass&quot;&gt;Content&lt;/div&gt;</code></pre>\n      </div>\n<p>… which renders into the DOM as the rather similar …</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">&lt;div class=&quot;customClass&quot;&gt;Content&lt;/div&gt;</code></pre>\n      </div>\n<blockquote>\n<p>You might expect JSX to use <code class="language-text">class</code> to mirror HTML but that isn’t possible since JSX is ultimately\ntranspiled to JavaScript, in which <code class="language-text">class</code> is a reserved word. See <a href="https://facebook.github.io/react/docs/dom-differences.html">DOM\nDifferences</a> for other instances where\nJSX deviates from HTML and the Document Object Model (DOM).</p>\n</blockquote>\n<blockquote>\n<p>You might be tempted to use hyphenated class names (<code class="language-text">custom-class</code>),\nbut <a href="https://github.com/css-modules/css-modules">CSS Modules</a>, which will soon be covered,\nrecommends using camelCased naming for local class names (see <a href="https://github.com/css-modules/css-modules#naming">Naming</a>).</p>\n</blockquote>\n<p>For simple applications, global class names are easy to use and understand. For more complex applications,\nyou will likely want a way to organize your CSS to improve maintainability and reuse. There are\nseveral methodologies (e.g. <a href="http://oocss.org/">Object-Oriented CSS (OOCSS)</a>, <a href="http://getbem.com/">Block Element\nModifier (BEM)</a>, and a host of others) and pre-processors (e.g. <a href="http://sass-lang.com/">SASS</a>,\n<a href="http://stylus-lang.com/">Stylus</a>, <a href="http://lesscss.org/">LESS</a>) that offer\ndifferent solutions to this problem.</p>\n<p>CSS Modules offers another option that works well with other tools and methodologies by focusing on\na narrow concern — modularization.  This is the method that the Enact team recommends.</p>\n<h2 id="introducing-css-modules"><a href="#introducing-css-modules" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introducing CSS Modules</h2>\n<p><a href="https://github.com/css-modules/css-modules">CSS Modules</a> is a specification that allows authors to\nwrite CSS (or SASS or LESS or …) using short, meaningful class names without being concerned about\nnaming conflicts that may arise when using multiple global stylesheets.</p>\n<p>All classes defined in a CSS Module are local by default. In practice, that means that they are\nrenamed at compile-time to a unique string. In order to use these generated class names, the CSS\nModule exports a map of authored names to generated names. For example, the following CSS Module:</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">.customClass {\n\tbackground: red;\n\tcolor: white;\n}</code></pre>\n      </div>\n<p>would export an object similar to the following:</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">{\n\tcustomClass: &#39;_13LGdX8RMStbBE9w-t0gZ1&#39;\n}</code></pre>\n      </div>\n<p>It’s also possible to declare classes be global using the <code class="language-text">:global</code> pseudo-selector, which prevents\nthe name mangling and makes the class reusable across components using the authored name.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">:global .customClass {\n\tbackground: red;\n\tcolor: white;\n}</code></pre>\n      </div>\n<p>Would export:</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">{\n\tcustomClass: &#39;customClass&#39;\n}</code></pre>\n      </div>\n<blockquote>\n<p>We discourage using global classes with CSS modules because it creates an implicit dependency\nbetween your component and the CSS source file containing the global class. Implicit dependencies\nare not tracked by the build tools and may be omitted if the resources <em>explicitly</em> depending\nupon them are no longer included.</p>\n</blockquote>\n<h3 id="creating-a-less-file"><a href="#creating-a-less-file" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating a LESS file</h3>\n<p>Let’s create a <code class="language-text">./src/App/App.less</code> file for our fantastic styling.</p>\n<blockquote>\n<p>The webpack config provided by <code class="language-text">enact create</code> includes support for the LESS preprocessor, so we’ve\nused that file extension here, even though we’re only using standard CSS syntax.</p>\n</blockquote>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">.app {\n\tfont-size: 48px;\n}</code></pre>\n      </div>\n<h2 id="using-css-modules"><a href="#using-css-modules" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using CSS Modules</h2>\n<p>From your component’s perspective, a CSS module is treated like any other module. You can <code class="language-text">import</code>\nit to make it a dependency of your component and to obtain a reference to the class name map.</p>\n<blockquote>\n<p>By convention, we import a component’s stylesheet into the <code class="language-text">css</code> variable. In addition to the\nconsistency benefit, it also provides a minor efficiency boost we’ll see later.</p>\n</blockquote>\n<h3 id="modify-appjs"><a href="#modify-appjs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Modify App.js</h3>\n<p>Let’s make two changes to our App module (<code class="language-text">./src/App/App.js</code>) to import CSS module and to apply the\n<code class="language-text">.app</code> style to our root element.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">import React from &#39;react&#39;;\n\nimport css from &#39;./App.less&#39;;\n\nconst App = function () {\n\treturn (\n\t\t&lt;div className={css.app}&gt;\n\t\t\tHello Enact!\n\t\t&lt;/div&gt;\n\t);\n};\n\nexport default App;\nexport {App};</code></pre>\n      </div>\n<h2 id="expressions-in-jsx"><a href="#expressions-in-jsx" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Expressions in JSX</h2>\n<p>You might have noticed that the JSX in the sample above deviates from standard HTML.  Notably, the use of the curly brackets ({}) around our <code class="language-text">css</code> variable.  We can’t use\nthe string, <code class="language-text">&quot;app&quot;</code>, because that would reference a global CSS class rather than the locally-scoped\nclass name from our CSS module. Instead, we’re using a JSX expression which allows us to embed any\nvalid JavaScript expression within our JSX markup. The following will evaluate the expression,\n<code class="language-text">css.app</code>, and pass the result as the value of the <code class="language-text">className</code> property for the <code class="language-text">&lt;div&gt;</code>.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">&lt;div className={css.app}&gt;</code></pre>\n      </div>\n<blockquote>\n<p><em>JSX expressions</em> can be used for property values or entire elements but not component names or\nproperty names.</p>\n<p><strong>Valid</strong></p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">&lt;div className={a ? b : c} /&gt;\t\t\t\t// ✅ property value\n\t{a ? &lt;span&gt;A&lt;/span&gt; : &lt;span&gt;!A&lt;/span&gt;}\t// ✅ entire child of &lt;div&gt;\n&lt;/div&gt;</code></pre>\n      </div>\n<p><strong>Invalid</strong></p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">&lt;{a ? &#39;div&#39; : &#39;span&#39;}&gt;\t\t\t\t\t\t// ❌ component name\n\t&lt;span {a ? b : c}=&quot;value&quot; /&gt;\t\t\t\t// ❌ property name\n\t&lt;span {a ? b=&quot;value&quot; : c=&quot;value&quot;}\t\t\t// ❌ entire property</code></pre>\n      </div>\n</blockquote>\n<h2 id="conclusion"><a href="#conclusion" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Conclusion</h2>\n<p>In this part we’ve explored <a href="#css-classes-in-react">applying CSS classes</a> to React components, <a href="#introducing-css-modules">importing\nlocally-scoped classes</a> from a CSS module, and <a href="#expressions-in-jsx">using expressions\n</a> in JSX to add dynamic properties and elements to our JSX.</p>\n<p>In the next part, we’ll introduce <code class="language-text">kind()</code>, which adds some\nsyntactic sugar around creating Stateless Components.</p>\n<p><strong>Next: <a href="../kind/">Introducing <code class="language-text">kind()</code></a></strong></p>',frontmatter:{title:"Adding CSS",github:"https://github.com/enactjs/docs/blob/develop/src/pages/docs/tutorials/tutorial-hello-enact/adding-css/index.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/basics/"},frontmatter:{title:"Enact Basics"}}},{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/adding-css/"},frontmatter:{title:"Adding CSS"}}},{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/"},frontmatter:{title:"Hello Enact!"}}},{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/kind/"},frontmatter:{title:"Introducing `kind()`"}}},{node:{fields:{slug:"/docs/tutorials/tutorial-hello-enact/adding-moonstone-support/"},frontmatter:{title:"Adding Moonstone Support"}}}]},site:{siteMetadata:{title:"I18N & L10N"}},docsPages:{edges:[{node:{path:"/docs/developer-tools/",context:{title:null}}},{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/developer-tools/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/developer-tools/index.js",frontmatter:{title:"Developer Tools"}}},{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/modules/index.js",frontmatter:{title:"Getting Started"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Tutorials"}}}]}},pathContext:{slug:"/docs/tutorials/tutorial-hello-enact/adding-css/",title:"Adding CSS",parentRegex:"/\\/docs\\/tutorials\\/tutorial-hello-enact(\\/[^/]*)?\\/$/"}}}});