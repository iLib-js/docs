webpackJsonp([22326864586591],{955:function(n,a){n.exports={data:{markdownRemark:{html:'<nav role="navigation" class="page-toc">\n<ul>\n<li><a href="#overview">Overview</a></li>\n<li><a href="#general-considerations">General Considerations</a></li>\n<li><a href="#webos-platform-support">webOS Platform Support</a></li>\n</ul>\n</nav>\n<h2 id="overview"><a href="#overview" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>\n<p>Migrating from Enyo to Enact can be a challenge. There are many new concepts to learn and, while many of the same\nMoonstone components exist, their APIs have changes. Given this, you can look at this as an opportunity to\naggressively refactor your app.</p>\n<blockquote>\n<p><strong><em>Please do not attempt to directly port your application. Enact is a wholly different approach to application structure\nwhich is incompatible with the older techniques.</em></strong></p>\n</blockquote>\n<p>This guide serves as a basic checklist of things to consider before you begin and is separated into <strong>General Considerations</strong>\n(developer tools, Spotlight, data management, etc.) and <strong>webOS Platform Support</strong> (platform APIs, services, etc.).</p>\n<h2 id="general-considerations"><a href="#general-considerations" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>General Considerations</h2>\n<p>This section highlights some of the generic things that should be reviewed when moving an Enyo application to Enact,\nregardless of platform.</p>\n<h3 id="application-structure"><a href="#application-structure" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Application Structure</h3>\n<blockquote>\n<p><strong><em>The framework team strongly encourages the use of the <a href="https://github.com/enactjs/cli"><code class="language-text">enact cli</code></a> tools to\ncreate, test, and deploy Enact applications.</em></strong></p>\n</blockquote>\n<p>Source files are generally arranged in the project like so:</p>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">project_root/   <span class="token punctuation">(</span>package.json lives here<span class="token punctuation">)</span>\n  assets/       <span class="token punctuation">(</span>images and other non-source content<span class="token punctuation">)</span>\n  resources/    <span class="token punctuation">(</span>ilibmanifest.json lives here<span class="token punctuation">)</span>\n  src/          <span class="token punctuation">(</span>this directory may be important<span class="token punctuation">)</span>\n  webos-meta/   <span class="token punctuation">(</span>helpful companion files <span class="token keyword">for</span> packaging webOS applications<span class="token punctuation">)</span></code></pre>\n      </div>\n<h4 id="component-usage"><a href="#component-usage" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Component Usage</h4>\n<p>While many Moonstone components retain the same names they have in Enyo, some have changed. We have prepared\nthe <a href="../enyo-enact-component-map/">Enyo to Enact Component Map</a> to help with the transition.</p>\n<p>In general, the <code class="language-text">content</code> property is now handled by the implicit <code class="language-text">children</code> property of components. Boolean\nproperties can be shortened to just the property name.  For example, <code class="language-text">moonstone/Button</code> in Enyo was configured\nlike this:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span> name<span class="token operator">:</span> \'MyButton\'<span class="token punctuation">,</span> kind<span class="token operator">:</span> Button<span class="token punctuation">,</span> small<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> content<span class="token operator">:</span> \'Click Me!\'<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>In Enact, the same effect is achieved like this:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>Button size<span class="token operator">=</span><span class="token string">"small"</span><span class="token operator">></span>Click Me<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span></code></pre>\n      </div>\n<p>Enact declarations are similar yet simpler than their Enyo counterparts. Further, some options and components\nthat were not used have been removed in Enact. Please refer to <a href="../../../modules/">module documentation</a>\nto see the exact APIs for each component.</p>\n<h5 id="code-classlanguage-textcomponentscode-block-to-code-classlanguage-textrendercode-method"><a href="#code-classlanguage-textcomponentscode-block-to-code-classlanguage-textrendercode-method" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="language-text">components</code> Block to <code class="language-text">render()</code> Method</h5>\n<p>With Enyo, you can declare which components are contained in a given kind or component.  This is done by specifying\nthem in the <code class="language-text">components</code> property of the kind.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token operator">...</span>\n<span class="token keyword">var</span> InnerComponent <span class="token operator">=</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">\'InnerComponent\'</span><span class="token punctuation">,</span>\n\tkind<span class="token operator">:</span> enyo<span class="token punctuation">.</span>Control<span class="token punctuation">,</span>\n\tcontent<span class="token operator">:</span> <span class="token string">\'This is just a &amp;lt;div&amp;gt; with some text\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n<span class="token keyword">var</span> OuterComponent <span class="token operator">=</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">\'OuterComponent\'</span><span class="token punctuation">,</span>\n\tkind<span class="token operator">:</span> enyo<span class="token punctuation">.</span>Control<span class="token punctuation">,</span>\n\tcomponents<span class="token operator">:</span> <span class="token punctuation">[</span>\n\t\t<span class="token punctuation">{</span>kind<span class="token operator">:</span> InnerComponent<span class="token punctuation">}</span>\n\t<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span></code></pre>\n      </div>\n<p>In Enact, a component can contain other components just as easily, but you use the <code class="language-text">render()</code> method to declare them.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token operator">...</span>\n<span class="token keyword">const</span> InnerComponent <span class="token operator">=</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">\'InnerComponent\'</span><span class="token punctuation">,</span>\n\t<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t\t<span class="token operator">&lt;</span>div<span class="token operator">></span>This is just a <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">with</span> some text<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> OuterComponent <span class="token operator">=</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">\'OuterComponent\'</span><span class="token punctuation">,</span>\n\t<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token operator">&lt;</span>div<span class="token operator">></span>\n\t\t\t<span class="token operator">&lt;</span>InnerComponent <span class="token operator">/</span><span class="token operator">></span>\n\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span></code></pre>\n      </div>\n<h5 id="getterssetters"><a href="#getterssetters" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getters/Setters</h5>\n<p>Enyo provides the ability to <code class="language-text">set</code> or <code class="language-text">get</code> any arbitrary property on a component:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token operator">...</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\nMyComponent<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">,</span> <span class="token string">\'bar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbar <span class="token operator">=</span> MyComponent<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// bar === "bar"</span>\n<span class="token operator">...</span></code></pre>\n      </div>\n<p>This is further enhanced by allowing you to specify ‘published’ (or ‘public’ in later Enyo versions) properties and mapping\nindividual <code class="language-text">set[Property]()</code> and <code class="language-text">get[Property]()</code> methods:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token operator">...</span>\nname<span class="token operator">:</span> <span class="token string">\'MyControl\'</span><span class="token punctuation">,</span>\nkind<span class="token operator">:</span> enyo<span class="token punctuation">.</span>Control<span class="token punctuation">,</span>\npublished<span class="token operator">:</span> <span class="token punctuation">{</span>\n\tfoo<span class="token operator">:</span> <span class="token string">\'bar\'</span>\n<span class="token punctuation">}</span>\n<span class="token operator">...</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\nMyControl<span class="token punctuation">.</span><span class="token function">setFoo</span><span class="token punctuation">(</span><span class="token string">\'nobar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbar <span class="token operator">=</span> MyControl<span class="token punctuation">.</span><span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// bar === "nobar"</span>\n<span class="token operator">...</span></code></pre>\n      </div>\n<p>In Enact, you ‘set’ properties by providing them to the rendered component(s):</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token operator">...</span>\n<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">\'prop-types\'</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">\'MyComponent\'</span><span class="token punctuation">,</span>\n\tpropTypes<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tfoo<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\tdefaultProps<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tfoo<span class="token operator">:</span> <span class="token string">\'bar\'</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>foo<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t\t<span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n<span class="token comment">// (another component that renders an instance of MyComponent)</span>\n<span class="token operator">...</span>\n\t<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t\t<span class="token operator">&lt;</span>MyComponent foo<span class="token operator">=</span><span class="token string">"nobar"</span> <span class="token operator">/</span><span class="token operator">></span>\n\t<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Due to the one-way nature of data-flow in Enact, ‘get’ functionality is unnecessary.  You will know the value from either\nthe data state or store, depending on how you have implemented your component and application.</p>\n<h5 id="computed-properties"><a href="#computed-properties" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Computed Properties</h5>\n<p>Computed properties are almost identical in Enyo and Enact with one major difference.  In Enyo, any computed property of\na kind can access any other computed property of that kind.  In Enact, computed properties are isolated from other computed\nproperties.</p>\n<h5 id="event-handling"><a href="#event-handling" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Event Handling</h5>\n<p>Enyo has several different ways to handle events (<code class="language-text">enyo.Signals</code>, the <code class="language-text">handlers</code> property of a component, the <code class="language-text">onClick</code>\nproperty of <code class="language-text">UiComponents</code>, etc.).  In Enact, event handling is a bit different.</p>\n<p>To handle an event, use <code class="language-text">@enact/core/handle</code> to create a handler.  It accepts one or more input functions that will process\nor filter the event.  The input functions will be processed in order until one returns <code class="language-text">false</code> (or any falsy value).</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token operator">...</span>\n<span class="token keyword">const</span> myHandler <span class="token operator">=</span> <span class="token function">handle</span><span class="token punctuation">(</span>\n\tpreventDefault<span class="token punctuation">,</span> <span class="token comment">// imported from `@enact/core/handle`; convenience method for preventing default event; returns `true`</span>\n\t<span class="token punctuation">(</span><span class="token parameter">ev<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// custom handling</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'handling event\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">handle</code> returns a function (MyHandler) that accepts an event, a properties object, and a context object.  To use it,\nspecify it as the value for an event property, such as <code class="language-text">onClick</code>.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token operator">...</span>\n<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t<span class="token operator">&lt;</span>div<span class="token operator">></span>\n\t\t<span class="token operator">&lt;</span>Item onClick<span class="token operator">=</span><span class="token punctuation">{</span>myHandler<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n\t<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>The <code class="language-text">@enact/core/handle</code> module exports some input methods designed to be used with <code class="language-text">handle</code>, such as <code class="language-text">forward</code> and\n<code class="language-text">preventDefault</code>.  Please see the <a href="../../../modules/core/handle/">module documentation</a> for a complete list.</p>\n<h4 id="code-classlanguage-textenact-clicode-vs-code-classlanguage-textenyo-devcode"><a href="#code-classlanguage-textenact-clicode-vs-code-classlanguage-textenyo-devcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="language-text">enact cli</code> vs. <code class="language-text">enyo-dev</code></h4>\n<p>The Enact developer tools simplify, yet remain similar to, the Enyo developer tools.</p>\n<table>\n<thead>\n<tr>\n<th>Activity</th>\n<th><code class="language-text">enact cli</code></th>\n<th><code class="language-text">enyo-dev</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a new project</td>\n<td><code class="language-text">enact create</code></td>\n<td><code class="language-text">enyo init</code></td>\n</tr>\n<tr>\n<td>Create a development build</td>\n<td><code class="language-text">npm run pack</code></td>\n<td><code class="language-text">enyo pack</code></td>\n</tr>\n<tr>\n<td>Create a production build</td>\n<td><code class="language-text">npm run pack-p</code></td>\n<td><code class="language-text">enyo pack -P</code></td>\n</tr>\n<tr>\n<td>Serve a local version of your project for testing</td>\n<td><code class="language-text">npm run serve</code></td>\n<td><code class="language-text">enyo pack</code>\n; \n<code class="language-text">enyo serve</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id="spotlight"><a href="#spotlight" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Spotlight</h3>\n<p>Refactoring an Enyo application to Enact affords an opportunity to reevaluate the application’s Spotlight usage.  Here\nare some things to consider:</p>\n<ul>\n<li>Does this application use Spotlight containers?</li>\n<li>Are there any custom Spotlight components?</li>\n<li>Does the application listen for Spotlight events?</li>\n<li>Can the overall structure of Spotlight components/navigation be simplified (for example, does the application handle\na majority of the Spotlight navigation events or are there multiple levels of nested containers)?</li>\n</ul>\n<h4 id="spotlight-containers"><a href="#spotlight-containers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Spotlight Containers</h4>\n<p>If your application uses Spotlight containers, be sure to review the <a href="../../spotlight/#containers">Spotlight container documentation</a>.</p>\n<h4 id="custom-spotlight-components"><a href="#custom-spotlight-components" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom Spotlight Components</h4>\n<p>If you have created custom Spotlight components in your application, make sure to review the <a href="../../spotlight/#spottable">Spottable documentation</a>.</p>\n<h4 id="spotlight-events"><a href="#spotlight-events" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Spotlight Events</h4>\n<p>Spotlight now uses native DOM events and does not dispatch synthetic events to the currently spotted control.  Please review\nthe <a href="../../spotlight/#events">Spotlight event documentation</a>.</p>\n<h3 id="data-management"><a href="#data-management" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Data Management</h3>\n<p>If an application makes use of <code class="language-text">enyo.Model</code> or <code class="language-text">enyo.Collection</code>, it will need to be adapted to some changes in Enact.\nNotably, there are no framework-provided collections or models.  Enact relies on its underlying Flux architecture to\nprovide state and property updates through its component hierarchy.  Therefore, it is necessary to manage application\nand/or component state to affect logic or UI changes.</p>\n<p>A typical Enyo application pattern is to create a model and a collection to hold instances of the model.  So that every\nview can have access to the collection, it can be made ‘public’.  Finally, using bindings, a view can map the collection\nbased on its requirements.  All that remains is to add models to the collection, usually as the result of an asynchronous\noperation.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// MyModel.js</span>\n<span class="token operator">...</span>\nname<span class="token operator">:</span> <span class="token string">\'MyModel\'</span><span class="token punctuation">,</span>\nkind<span class="token operator">:</span> enyo<span class="token punctuation">.</span>Model<span class="token punctuation">,</span>\n<span class="token operator">...</span>\n<span class="token comment">// MyCollection.js</span>\n<span class="token operator">...</span>\nname<span class="token operator">:</span> <span class="token string">\'MyCollection\'</span><span class="token punctuation">,</span>\nkind<span class="token operator">:</span> enyo<span class="token punctuation">.</span>Collection<span class="token punctuation">,</span>\nmodel<span class="token operator">:</span> MyModel<span class="token punctuation">,</span>\n<span class="token operator">...</span>\n<span class="token comment">// App.js</span>\n<span class="token operator">...</span>\ncomponents<span class="token operator">:</span> <span class="token punctuation">[</span>\n\t<span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">\'allData\'</span><span class="token punctuation">,</span> kind<span class="token operator">:</span> MyCollection<span class="token punctuation">,</span> <span class="token keyword">public</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\nview<span class="token operator">:</span> MainView\n<span class="token operator">...</span>\n<span class="token comment">// MainView.js</span>\n<span class="token operator">...</span>\ncomponents<span class="token operator">:</span> <span class="token punctuation">[</span>\n\t<span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">\'list\'</span><span class="token punctuation">,</span> kind<span class="token operator">:</span> enyo<span class="token punctuation">.</span>DataList<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\nbindings<span class="token operator">:</span> <span class="token punctuation">[</span>\n\t<span class="token punctuation">{</span><span class="token keyword">from</span><span class="token operator">:</span> <span class="token string">\'app.allData\'</span><span class="token punctuation">,</span> to<span class="token operator">:</span> <span class="token string">\'$.list.collection\'</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token operator">...</span></code></pre>\n      </div>\n<p>The above example is quite simplistic, so it can be re-implemented in Enact without using additional libraries.  For\ncomplex data management and application state management, third-party solutions (such as <a href="../../redux/">Redux</a>) exist.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// App.js</span>\n<span class="token operator">...</span>\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n\t<span class="token operator">...</span>\n\t<span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\t\trecentData<span class="token operator">:</span> props<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">// response handler from some async request (not shown)</span>\n\t<span class="token function-variable function">dataFetched</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>recentData<span class="token operator">:</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">?</span> data <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token operator">&lt;</span>div<span class="token operator">></span>\n\t\t\t<span class="token operator">&lt;</span>MainView data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>recentData<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// MainView.js</span>\n<span class="token operator">...</span>\n<span class="token keyword">const</span> MainView <span class="token operator">=</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">\'MainView\'</span><span class="token punctuation">,</span>\n\t<span class="token operator">...</span>\n\t<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t\t<span class="token operator">&lt;</span>VirtualList\n\t\t\t<span class="token operator">...</span>\n\t\t\tdata<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span>\n\t\t\t<span class="token operator">...</span>\n\t\t<span class="token operator">/</span><span class="token operator">></span>\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span></code></pre>\n      </div>\n<h3 id="view-management"><a href="#view-management" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>View Management</h3>\n<p>Enact provides <code class="language-text">@enact/moonstone/Panels</code>, which is sufficient for most existing Enyo applications to use.  However, it extends\na more generic <code class="language-text">@enact/ui/ViewManager</code> component that might offer the opportunity to improve an application’s overall UX.</p>\n<h2 id="webos-platform-support"><a href="#webos-platform-support" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>webOS Platform Support</h2>\n<p>The <code class="language-text">@enact/webos</code> module provides many useful utilities and methods to interact with the webOS platform.</p>\n<ul>\n<li><code class="language-text">@enact/webos/application</code> - provides information about the application metadata</li>\n<li><code class="language-text">@enact/webos/deviceinfo</code> - returns various details about the webOS device where the application is running</li>\n<li><code class="language-text">@enact/webos/keyboard</code> - use to see if the keyboard is currently visible</li>\n<li>\n<p><code class="language-text">@enact/webos/LS2Request</code> - without this, your application cannot use the myriad webOS services that are available!\nAlmost every Enyo webOS application utilizes service calls.</p>\n<ul>\n<li><a href="../../webos/luna-service-api/">Luna Service API</a> example</li>\n</ul>\n</li>\n<li><code class="language-text">@enact/webos/platform</code> - returns various details about the webOS platform where the application is running (SmartTV, Open webOS, legacy devices (Palm, HP), etc.)</li>\n<li><code class="language-text">@enact/webos/pmloglib</code> - system-level logging for your application</li>\n<li><code class="language-text">@enact/webos/VoiceReadout</code> - reads alert text when accessibility VoiceReadout enabled</li>\n</ul>',
frontmatter:{title:"Enyo Application Migration Guide",github:"https://github.com/enactjs/enact/blob/develop/docs/migration/enyo/migrating-enyo-apps.md"}},allMarkdownRemark:{edges:[{node:{fields:{slug:"/docs/developer-guide/migration/enyo/migrating-enyo-apps/"},frontmatter:{title:"Enyo Application Migration Guide"}}},{node:{fields:{slug:"/docs/developer-guide/migration/enyo/enyo-enact-component-map/"},frontmatter:{title:"Enyo to Enact Component Map"}}},{node:{fields:{slug:"/docs/developer-guide/migration/enyo/migrate-fittables/"},frontmatter:{title:"Migrating Enyo Fittables"}}},{node:{fields:{slug:"/docs/developer-guide/migration/enyo/"},frontmatter:{title:"Migrating from Enyo"}}},{node:{fields:{slug:"/docs/developer-guide/migration/enyo/migrate-i18n/"},frontmatter:{title:"Migrating i18n"}}}]},site:{siteMetadata:{title:"Enact"}},docsPages:{edges:[{node:{path:"/docs/developer-guide/",context:{title:null}}},{node:{path:"/docs/developer-tools/",context:{title:null}}},{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/developer-guide/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/developer-guide/index.js",frontmatter:{title:"Developer Guide"}}},{node:{fields:{slug:"/docs/developer-tools/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/developer-tools/index.js",frontmatter:{title:"Developer Tools"}}},{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/modules/index.js",frontmatter:{title:"API Libraries"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/enact-docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Tutorials"}}}]}},pathContext:{slug:"/docs/developer-guide/migration/enyo/migrating-enyo-apps/",title:"Enyo Application Migration Guide",parentRegex:"/\\/docs\\/developer-guide\\/migration\\/enyo(\\/[^/]*)?\\/$/"}}}});