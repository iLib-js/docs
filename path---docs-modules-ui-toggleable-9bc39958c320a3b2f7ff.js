webpackJsonp([1930489266600],{1028:function(e,t){e.exports={data:{jsonDoc:{fields:{slug:"/docs/modules/ui/Toggleable/"},internal:{content:'[{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"A higher-order component at handles toggle state."}]}]},"tags":[{"title":"module","description":null,"type":null,"name":"ui/Toggleable"},{"title":"exports","description":"Toggleable"}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"kind":"module","name":"ui/Toggleable","members":{"global":[],"inner":[],"instance":[],"events":[],"static":[{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"A higher-order component that applies a \'toggleable\' behavior to its wrapped component."}]},{"type":"paragraph","children":[{"type":"text","value":"Its default event and property can be configured when applied to a component."}]},{"type":"paragraph","children":[{"type":"text","value":"Note: This HoC passes a number of props to the wrapped component that should be passed to the\\nmain DOM node or consumed by the wrapped component."}]},{"type":"paragraph","children":[{"type":"text","value":"Example:"}]},{"type":"code","lang":null,"value":"const Item = ({selected, ...rest}) => (<div {...rest}>{selected}</div>);\\n...\\nconst ToggleItem = Toggleable({toggleProp: \'onClick\'}, Item);"}]},"tags":[{"title":"class","description":null,"type":null,"name":"Toggleable"},{"title":"memberof","description":"ui/Toggleable"},{"title":"hoc","description":null},{"title":"public","description":null}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"kind":"class","name":"Toggleable","memberof":"ui/Toggleable","access":"public","members":{"global":[],"inner":[],"instance":[{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Default toggled state applied at construction when the toggled prop is "},{"type":"inlineCode","value":"undefined"},{"type":"text","value":" or\\n"},{"type":"inlineCode","value":"null"},{"type":"text","value":"."}]}]},"tags":[{"title":"name","description":null,"name":"defaultSelected"},{"title":"memberof","description":"ui/Toggleable.Toggleable.prototype"},{"title":"type","description":null,"type":{"type":"NameExpression","name":"Boolean"}},{"title":"default","description":"false"},{"title":"public","description":null}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"name":"defaultSelected","memberof":"ui/Toggleable.Toggleable","type":{"type":"NameExpression","name":"Boolean"},"access":"public","scope":"instance","members":{"global":[],"inner":[],"instance":[],"events":[],"static":[]},"namespace":"ui/ToggleableToggleable#defaultSelected"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Whether or not the component is in a disabled state."}]}]},"tags":[{"title":"memberof","description":"ui/Toggleable.Toggleable.prototype"},{"title":"type","description":null,"type":{"type":"NameExpression","name":"Boolean"}},{"title":"public","description":null}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"memberof":"ui/Toggleable.Toggleable","type":{"type":"NameExpression","name":"Boolean"},"access":"public","name":"disabled","scope":"instance","members":{"global":[],"inner":[],"instance":[],"events":[],"static":[]},"namespace":"ui/ToggleableToggleable#disabled"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Current toggled state."}]},{"type":"paragraph","children":[{"type":"text","value":"When set at construction, the component is considered \'controlled\' and will only\\nupdate its internal value when updated by new props. If undefined, the component\\nis \'uncontrolled\' and "},{"type":"inlineCode","value":"Toggleable"},{"type":"text","value":" will manage the toggled state using callbacks\\ndefined by its configuration."}]}]},"tags":[{"title":"name","description":null,"name":"selected"},{"title":"memberof","description":"ui/Toggleable.Toggleable.prototype"},{"title":"type","description":null,"type":{"type":"NameExpression","name":"Boolean"}},{"title":"public","description":null}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"name":"selected","memberof":"ui/Toggleable.Toggleable","type":{"type":"NameExpression","name":"Boolean"},"access":"public","scope":"instance","members":{"global":[],"inner":[],"instance":[],"events":[],"static":[]},"namespace":"ui/ToggleableToggleable#selected"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Event callback to notify that state should be toggled."}]}]},"tags":[{"title":"name","description":null,"name":"onToggle"},{"title":"memberof","description":"ui/Toggleable.Toggleable.prototype"},{"title":"type","description":null,"type":{"type":"NameExpression","name":"Function"}},{"title":"public","description":null}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"name":"onToggle","memberof":"ui/Toggleable.Toggleable","type":{"type":"NameExpression","name":"Function"},"access":"public","scope":"instance","members":{"global":[],"inner":[],"instance":[],"events":[],"static":[]},"namespace":"ui/ToggleableToggleable#onToggle"}],"events":[],"static":[{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Default config for "},{"type":"inlineCode","value":"Toggleable"},{"type":"text","value":"."}]}]},"tags":[{"title":"memberof","description":"ui/Toggleable.Toggleable"},{"title":"hocconfig","description":null}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"memberof":"ui/Toggleable.Toggleable","name":"defaultConfig","kind":"constant","members":{"global":[],"inner":[],"instance":[],"events":[],"static":[{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Configures the event name that activates the component."}]},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note"}]},{"type":"text","value":": When using "},{"type":"inlineCode","value":"activate"},{"type":"text","value":"/"},{"type":"inlineCode","value":"deactivate"},{"type":"text","value":", the event payload will only forward the original\\nevent and not include toggled "},{"type":"inlineCode","value":"prop"},{"type":"text","value":" value. Use "},{"type":"inlineCode","value":"toggle"},{"type":"text","value":" to receive toggled value from the\\nevent payload."}]},{"type":"paragraph","children":[{"type":"text","value":"Example:"}]},{"type":"code","lang":null,"value":"const ToggleItem = Toggleable({activate: \'onFocus\', deactivate: \'onBlur\'}, Item);\\n\\nhandleEvent = (ev) => {\\n\\t// do something with `ev.selected` here\\n}\\n\\n<ToggleItem onToggle={handleEvent}>This is a toggle item</Item>"}]},"tags":[{"title":"type","description":null,"type":{"type":"NameExpression","name":"String"}},{"title":"memberof","description":"ui/Toggleable.Toggleable.defaultConfig"}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"type":{"type":"NameExpression","name":"String"},"memberof":"ui/Toggleable.Toggleable.defaultConfig","name":"activate","members":{"global":[],"inner":[],"instance":[],"events":[],"static":[]},"namespace":"ui/ToggleableToggleabledefaultConfigactivate"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Configures the event name that deactivates the component."}]},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note"}]},{"type":"text","value":": When using "},{"type":"inlineCode","value":"activate"},{"type":"text","value":"/"},{"type":"inlineCode","value":"deactivate"},{"type":"text","value":", the event payload will only forward the original\\nevent and not include toggled "},{"type":"inlineCode","value":"prop"},{"type":"text","value":" value. Use "},{"type":"inlineCode","value":"toggle"},{"type":"text","value":" to receive toggled value from the\\nevent payload."}]},{"type":"paragraph","children":[{"type":"text","value":"Example:"}]},{"type":"code","lang":null,"value":"const ToggleItem = Toggleable({activate: \'onFocus\', deactivate: \'onBlur\'}, Item);\\n\\nhandleEvent = (ev) => {\\n\\t// do something with `ev.selected` here\\n}\\n\\n<ToggleItem onToggle={handleEvent}>This is a toggle item</Item>"}]},"tags":[{"title":"type","description":null,"type":{"type":"NameExpression","name":"String"}},{"title":"memberof","description":"ui/Toggleable.Toggleable.defaultConfig"}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"type":{"type":"NameExpression","name":"String"},"memberof":"ui/Toggleable.Toggleable.defaultConfig","name":"deactivate","members":{"global":[],"inner":[],"instance":[],"events":[],"static":[]},"namespace":"ui/ToggleableToggleabledefaultConfigdeactivate"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Configures additional props to attach to the event that is sent when toggled."}]}]},"tags":[{"title":"type","description":null,"type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"String"}]}},{"title":"default","description":"[]"},{"title":"memberof","description":"ui/Toggleable.Toggleable.defaultConfig"}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"String"}]},"memberof":"ui/Toggleable.Toggleable.defaultConfig","name":"eventProps","members":{"global":[],"inner":[],"instance":[],"events":[],"static":[]},"namespace":"ui/ToggleableToggleabledefaultConfigeventProps"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Configures the property that is passed to the wrapped component when toggled."}]}]},"tags":[{"title":"type","description":null,"type":{"type":"NameExpression","name":"String"}},{"title":"default","description":"\'selected\'"},{"title":"memberof","description":"ui/Toggleable.Toggleable.defaultConfig"}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"type":{"type":"NameExpression","name":"String"},"memberof":"ui/Toggleable.Toggleable.defaultConfig","name":"prop","members":{"global":[],"inner":[],"instance":[],"events":[],"static":[]},"namespace":"ui/ToggleableToggleabledefaultConfigprop"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Configures the event name that toggles the component."}]},{"type":"paragraph","children":[{"type":"text","value":"The payload includes a toggled Boolean value of "},{"type":"inlineCode","value":"prop"},{"type":"text","value":"."}]},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note"}]},{"type":"text","value":": The payload will override the original event. If a native event is set, then the native\\nevent payload will be lost."}]}]},"tags":[{"title":"type","description":null,"type":{"type":"NameExpression","name":"String"}},{"title":"default","description":"\'onToggle\'"},{"title":"memberof","description":"ui/Toggleable.Toggleable.defaultConfig"}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"type":{"type":"NameExpression","name":"String"},"memberof":"ui/Toggleable.Toggleable.defaultConfig","name":"toggle","members":{"global":[],"inner":[],"instance":[],"events":[],"static":[]},"namespace":"ui/ToggleableToggleabledefaultConfigtoggle"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Allows you to remap the incoming "},{"type":"inlineCode","value":"toggle"},{"type":"text","value":" callback to an event name of your choosing."}]},{"type":"paragraph","children":[{"type":"text","value":"For example, run "},{"type":"inlineCode","value":"onToggle"},{"type":"text","value":" when the wrapped component has an "},{"type":"inlineCode","value":"onClick"},{"type":"text","value":" property and you\'ve specified\\n"},{"type":"inlineCode","value":"onClick"},{"type":"text","value":" here."}]}]},"tags":[{"title":"type","description":null,"type":{"type":"NameExpression","name":"String"}},{"title":"default","description":"null"},{"title":"memberof","description":"ui/Toggleable.Toggleable.defaultConfig"}],"augments":[],"examples":[],"implements":[],"params":[],"properties":[],"returns":[],"sees":[],"throws":[],"yields":[],"type":{"type":"NameExpression","name":"String"},"memberof":"ui/Toggleable.Toggleable.defaultConfig","name":"toggleProp","members":{"global":[],"inner":[],"instance":[],"events":[],"static":[]},"namespace":"ui/ToggleableToggleabledefaultConfigtoggleProp"}]},"namespace":"ui/ToggleableToggleabledefaultConfig"}]},"namespace":"ui/ToggleableToggleable"}]},"namespace":"ui/Toggleable"}]'}},modulesList:{edges:[{node:{fields:{slug:"/docs/modules/core/dispatcher/"}}},{node:{fields:{slug:"/docs/modules/core/handle/"}}},{node:{fields:{slug:"/docs/modules/core/hoc/"}}},{node:{fields:{slug:"/docs/modules/core/keymap/"}}},{node:{fields:{slug:"/docs/modules/core/kind/"}}},{node:{fields:{slug:"/docs/modules/core/platform/"}}},{node:{fields:{slug:"/docs/modules/core/snapshot/"}}},{node:{fields:{slug:"/docs/modules/core/util/"}}},{node:{fields:{slug:"/docs/modules/i18n/$L/"}}},{node:{fields:{slug:"/docs/modules/i18n/I18nDecorator/"}}},{node:{fields:{slug:"/docs/modules/i18n/Text/"}}},{node:{fields:{slug:"/docs/modules/i18n/util/"}}},{node:{fields:{slug:"/docs/modules/spotlight/"}}},{node:{fields:{slug:"/docs/modules/spotlight/Accelerator/"}}},{node:{fields:{slug:"/docs/modules/spotlight/Pause/"}}},{node:{fields:{slug:"/docs/modules/spotlight/SpotlightContainerDecorator/"}}},{node:{fields:{slug:"/docs/modules/spotlight/SpotlightRootDecorator/"}}},{node:{fields:{slug:"/docs/modules/spotlight/Spottable/"}}},{node:{fields:{slug:"/docs/modules/ui/A11yDecorator/"}}},{node:{fields:{slug:"/docs/modules/ui/AnnounceDecorator/"}}},{node:{fields:{slug:"/docs/modules/ui/BodyText/"}}},{node:{fields:{slug:"/docs/modules/ui/Button/"}}},{node:{fields:{slug:"/docs/modules/ui/Cancelable/"}}},{node:{fields:{slug:"/docs/modules/ui/Changeable/"}}},{node:{fields:{slug:"/docs/modules/ui/ComponentOverride/"}}},{node:{fields:{slug:"/docs/modules/ui/FloatingLayer/"}}},{node:{fields:{slug:"/docs/modules/ui/ForwardRef/"}}},{node:{fields:{slug:"/docs/modules/ui/GridListImageItem/"}}},{node:{fields:{slug:"/docs/modules/ui/Group/"}}},{node:{fields:{slug:"/docs/modules/ui/Heading/"}}},{node:{fields:{slug:"/docs/modules/ui/Icon/"}}},{node:{fields:{slug:"/docs/modules/ui/IconButton/"}}},{node:{fields:{slug:"/docs/modules/ui/Image/"}}},{node:{fields:{slug:"/docs/modules/ui/ImageItem/"}}},{node:{fields:{slug:"/docs/modules/ui/Item/"}}},{node:{fields:{slug:"/docs/modules/ui/LabeledIcon/"}}},{node:{fields:{slug:"/docs/modules/ui/Layout/"}}},{node:{fields:{slug:"/docs/modules/ui/Marquee/"}}},{node:{fields:{slug:"/docs/modules/ui/Measurable/"}}},{node:{fields:{slug:"/docs/modules/ui/Media/"}}},{node:{fields:{slug:"/docs/modules/ui/Placeholder/"}}},{node:{fields:{slug:"/docs/modules/ui/ProgressBar/"}}},{node:{fields:{slug:"/docs/modules/ui/RadioDecorator/"}}},{node:{fields:{slug:"/docs/modules/ui/Repeater/"}}},{node:{fields:{slug:"/docs/modules/ui/Resizable/"}}},{node:{fields:{slug:"/docs/modules/ui/Routable/"}}},{node:{fields:{slug:"/docs/modules/ui/Scroller/"}}},{node:{fields:{slug:"/docs/modules/ui/Skinnable/"}}},{node:{fields:{slug:"/docs/modules/ui/Slider/"}}},{node:{fields:{slug:"/docs/modules/ui/SlotItem/"}}},{node:{fields:{slug:"/docs/modules/ui/Slottable/"}}},{node:{fields:{slug:"/docs/modules/ui/Spinner/"}}},{node:{fields:{slug:"/docs/modules/ui/ToggleIcon/"}}},{node:{fields:{slug:"/docs/modules/ui/ToggleItem/"}}},{node:{fields:{slug:"/docs/modules/ui/Toggleable/"}}},{node:{fields:{slug:"/docs/modules/ui/Touchable/"}}},{node:{fields:{slug:"/docs/modules/ui/Transition/"}}},{node:{fields:{slug:"/docs/modules/ui/ViewManager/"}}},{node:{fields:{slug:"/docs/modules/ui/VirtualList/"}}},{node:{fields:{slug:"/docs/modules/ui/resolution/"}}},{node:{fields:{slug:"/docs/modules/webos/LS2Request/"}}},{node:{fields:{slug:"/docs/modules/webos/application/"}}},{node:{fields:{slug:"/docs/modules/webos/deviceinfo/"}}},{node:{fields:{slug:"/docs/modules/webos/keyboard/"}}},{node:{fields:{slug:"/docs/modules/webos/platform/"}}},{node:{fields:{slug:"/docs/modules/webos/pmloglib/"}}},{node:{fields:{slug:"/docs/modules/webos/speech/"}}}]},site:{siteMetadata:{title:"I18N & L10N"}},docsPages:{edges:[{node:{path:"/docs/modules/",context:{title:null}}},{node:{path:"/docs/tutorials/",context:{title:null}}}]},jsMetadata:{edges:[{node:{fields:{slug:"/docs/modules/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/modules/index.js",frontmatter:{title:"Getting Started"}}},{node:{fields:{slug:"/docs/tutorials/"},fileAbsolutePath:"/home/goun/Source/opensource_iLib/docs/src/pages/docs/tutorials/index.js",frontmatter:{title:"Internationalization"}}}]}},pathContext:{slug:"/docs/modules/ui/Toggleable/",title:"ui/Toggleable"}}}});